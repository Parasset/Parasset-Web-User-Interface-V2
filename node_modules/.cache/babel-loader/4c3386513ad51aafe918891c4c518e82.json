{"ast":null,"code":"//@ts-nocheck\nimport { useCallback, useMemo } from 'react';\nimport { useActiveWeb3React } from '../../hooks';\nimport { addPopup, removePopup, toggleWalletModal1, toggleWalletModal, toggleStatus, updateTransactionHash, toggleSettingsMenu } from './actions';\nimport { useSelector, useDispatch } from 'react-redux';\nexport function useBlockNumber() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  return useSelector(state => state.application.blockNumber[chainId !== null && chainId !== void 0 ? chainId : -1]);\n}\nexport function useWalletModalOpen() {\n  return useSelector(state => state.application.walletModalOpen);\n}\nexport function useWalletModalToggle() {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\nexport function useSettingsMenuOpen() {\n  return useSelector(state => state.application.settingsMenuOpen);\n}\nexport function useToggleSettingsMenu() {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n} // returns a function that allows adding a popup\n\nexport function useAddPopup() {\n  const dispatch = useDispatch();\n  return useCallback((content, key) => {\n    dispatch(addPopup({\n      content,\n      key\n    }));\n  }, [dispatch]);\n} // returns a function that allows removing a popup via its key\n\nexport function useRemovePopup() {\n  const dispatch = useDispatch();\n  return useCallback(key => {\n    dispatch(removePopup({\n      key\n    }));\n  }, [dispatch]);\n} // get the list of active popups\n\nexport function useActivePopups() {\n  const list = useSelector(state => state.application.popupList);\n  return useMemo(() => list.filter(item => item.show), [list]);\n}\nexport function useWalletModalToggle1() {\n  const dispatch = useDispatch();\n  return useCallback(walletModalOpen1 => dispatch(toggleWalletModal1({\n    walletModalOpen1\n  })), [dispatch]);\n}\nexport function useWaitModal() {\n  return useSelector(state => {\n    return state.application.walletModalOpen1;\n  });\n}\nexport function useUpdateTransactionHash() {\n  const dispatch = useDispatch();\n  return useCallback(transactionHash => dispatch(updateTransactionHash({\n    transactionHash\n  })), [dispatch]);\n}\nexport function useTransactionHash() {\n  return useSelector(state => {\n    return state.application.transactionHash;\n  });\n}\nexport function useStatusToggle() {\n  const dispatch = useDispatch();\n  return useCallback(status => dispatch(toggleStatus({\n    status\n  })), [dispatch]);\n}\nexport function useStatus() {\n  return useSelector(state => {\n    return state.application.status;\n  });\n}","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/state/application/hooks.ts"],"names":["useCallback","useMemo","useActiveWeb3React","addPopup","removePopup","toggleWalletModal1","toggleWalletModal","toggleStatus","updateTransactionHash","toggleSettingsMenu","useSelector","useDispatch","useBlockNumber","chainId","state","application","blockNumber","useWalletModalOpen","walletModalOpen","useWalletModalToggle","dispatch","useSettingsMenuOpen","settingsMenuOpen","useToggleSettingsMenu","useAddPopup","content","key","useRemovePopup","useActivePopups","list","popupList","filter","item","show","useWalletModalToggle1","walletModalOpen1","useWaitModal","useUpdateTransactionHash","transactionHash","useTransactionHash","useStatusToggle","status","useStatus"],"mappings":"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","sourcesContent":["//@ts-nocheck\nimport { useCallback, useMemo } from 'react'\nimport { useActiveWeb3React } from '../../hooks'\nimport { addPopup, PopupContent, removePopup, toggleWalletModal1,toggleWalletModal, toggleStatus,updateTransactionHash,toggleSettingsMenu } from './actions'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { AppState } from '../index'\n\nexport function useBlockNumber(): number | undefined {\n  const { chainId } = useActiveWeb3React()\n\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1])\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen)\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch()\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch])\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen)\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch()\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch])\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch()\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({ content, key }))\n    },\n    [dispatch]\n  )\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch()\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({ key }))\n    },\n    [dispatch]\n  )\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList)\n  return useMemo(() => list.filter(item => item.show), [list])\n}\nexport function useWalletModalToggle1(){\n  const dispatch = useDispatch();\n  return useCallback((walletModalOpen1) => dispatch(toggleWalletModal1({walletModalOpen1})), [dispatch]);\n}\n\nexport function useWaitModal() {\n  return (useSelector((state) => {\n    return state.application.walletModalOpen1;\n  })) \n\n}\n\nexport function useUpdateTransactionHash(){\n  const dispatch = useDispatch();\n  return useCallback((transactionHash) => dispatch(updateTransactionHash({transactionHash})), [dispatch]);\n}\n\nexport function useTransactionHash() {\n  return (useSelector((state) => {\n    return state.application.transactionHash;\n  })) \n\n}\nexport function useStatusToggle(){\n  const dispatch = useDispatch();\n  return useCallback((status) => dispatch(toggleStatus({status})), [dispatch]);\n}\nexport function useStatus() {\n  return (useSelector((state) => {\n    return state.application.status;\n  })) \n\n}"]},"metadata":{},"sourceType":"module"}