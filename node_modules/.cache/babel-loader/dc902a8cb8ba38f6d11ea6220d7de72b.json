{"ast":null,"code":"var _jsxFileName = \"/Users/miczero/ParaAsset/src/contexts/Banks/Banks.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Context from './context';\nimport useBasisCash from '../../hooks/useBasisCash';\nimport config, { bankDefinitions } from '../../config';\n\nconst Banks = ({\n  children\n}) => {\n  const [banks, setBanks] = useState([]);\n  const basisCash = useBasisCash();\n  const fetchPools = useCallback(async () => {\n    const banks = [];\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (bankInfo.finished) {\n        if (!basisCash.isUnlocked) continue; // only show pools staked by user\n        // const balance = await basisCash.stakedBalanceOnBank(bankInfo.contract, basisCash.myAccount);\n        // if (balance.lte(0)) {\n        //   continue;\n        // }\n      }\n\n      banks.push({ ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: basisCash.externalTokens[bankInfo.depositTokenName],\n        earnToken: bankInfo.earnTokenName == 'GAC' ? basisCash.GAC : basisCash.GAS\n      });\n    }\n\n    banks.sort((a, b) => a.sort > b.sort ? 1 : -1);\n    setBanks(banks);\n  }, [basisCash, basisCash === null || basisCash === void 0 ? void 0 : basisCash.isUnlocked, setBanks]);\n  useEffect(() => {\n    if (basisCash) {\n      fetchPools().catch(err => console.error(`Failed to fetch pools: ${err.stack}`));\n    }\n  }, [basisCash, basisCash === null || basisCash === void 0 ? void 0 : basisCash.isUnlocked, fetchPools]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      banks\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }\n  }, children);\n};\n\nexport default Banks;","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/contexts/Banks/Banks.tsx"],"names":["React","useCallback","useEffect","useState","Context","useBasisCash","config","bankDefinitions","Banks","children","banks","setBanks","basisCash","fetchPools","bankInfo","Object","values","finished","isUnlocked","push","address","deployments","contract","depositToken","externalTokens","depositTokenName","earnToken","earnTokenName","GAC","GAS","sort","a","b","catch","err","console","error","stack"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA,OAAOC,MAAP,IAAiBC,eAAjB,QAAwC,cAAxC;;AAEA,MAAMC,KAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACxC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAMS,SAAS,GAAGP,YAAY,EAA9B;AAEA,QAAMQ,UAAU,GAAGZ,WAAW,CAAC,YAAY;AACzC,UAAMS,KAAa,GAAG,EAAtB;;AAEA,SAAK,MAAMI,QAAX,IAAuBC,MAAM,CAACC,MAAP,CAAcT,eAAd,CAAvB,EAAuD;AACrD,UAAIO,QAAQ,CAACG,QAAb,EAAuB;AACrB,YAAI,CAACL,SAAS,CAACM,UAAf,EAA2B,SADN,CAGrB;AACA;AACA;AACA;AACA;AACD;;AACDR,MAAAA,KAAK,CAACS,IAAN,CAAW,EACT,GAAGL,QADM;AAETM,QAAAA,OAAO,EAAEd,MAAM,CAACe,WAAP,CAAmBP,QAAQ,CAACQ,QAA5B,EAAsCF,OAFtC;AAGTG,QAAAA,YAAY,EAAEX,SAAS,CAACY,cAAV,CAAyBV,QAAQ,CAACW,gBAAlC,CAHL;AAITC,QAAAA,SAAS,EAAEZ,QAAQ,CAACa,aAAT,IAA0B,KAA1B,GAAkCf,SAAS,CAACgB,GAA5C,GAAkDhB,SAAS,CAACiB;AAJ9D,OAAX;AAMD;;AACDnB,IAAAA,KAAK,CAACoB,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACD,IAAF,GAASE,CAAC,CAACF,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CAA7C;AACAnB,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GAtB6B,EAsB3B,CAACE,SAAD,EAAYA,SAAZ,aAAYA,SAAZ,uBAAYA,SAAS,CAAEM,UAAvB,EAAmCP,QAAnC,CAtB2B,CAA9B;AAwBAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,SAAJ,EAAe;AACbC,MAAAA,UAAU,GACPoB,KADH,CACSC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAe,0BAAyBF,GAAG,CAACG,KAAM,EAAlD,CADhB;AAED;AACF,GALQ,EAKN,CAACzB,SAAD,EAAYA,SAAZ,aAAYA,SAAZ,uBAAYA,SAAS,CAAEM,UAAvB,EAAmCL,UAAnC,CALM,CAAT;AAOA,sBAAO,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAAEH,MAAAA;AAAF,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCD,QAArC,CAAP;AACD,CApCD;;AAsCA,eAAeD,KAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport Context from './context';\nimport useBasisCash from '../../hooks/useBasisCash';\nimport { Bank } from '../../basis-cash';\nimport config, { bankDefinitions } from '../../config';\n\nconst Banks: React.FC = ({ children }) => {\n  const [banks, setBanks] = useState<Bank[]>([]);\n  const basisCash = useBasisCash();\n\n  const fetchPools = useCallback(async () => {\n    const banks: Bank[] = [];\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (bankInfo.finished) {\n        if (!basisCash.isUnlocked) continue;\n\n        // only show pools staked by user\n        // const balance = await basisCash.stakedBalanceOnBank(bankInfo.contract, basisCash.myAccount);\n        // if (balance.lte(0)) {\n        //   continue;\n        // }\n      }\n      banks.push({\n        ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: basisCash.externalTokens[bankInfo.depositTokenName],\n        earnToken: bankInfo.earnTokenName == 'GAC' ? basisCash.GAC : basisCash.GAS,\n      });\n    }\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\n    setBanks(banks);\n  }, [basisCash, basisCash?.isUnlocked, setBanks]);\n\n  useEffect(() => {\n    if (basisCash) {\n      fetchPools()\n        .catch(err => console.error(`Failed to fetch pools: ${err.stack}`));\n    }\n  }, [basisCash, basisCash?.isUnlocked, fetchPools]);\n\n  return <Context.Provider value={{ banks }}>{children}</Context.Provider>;\n};\n\nexport default Banks;\n"]},"metadata":{},"sourceType":"module"}