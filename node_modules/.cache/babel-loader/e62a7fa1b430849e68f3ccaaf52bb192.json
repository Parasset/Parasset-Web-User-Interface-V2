{"ast":null,"code":"//@ts-nocheck\nimport { Fetcher, Route, Token } from '@uniswap/sdk';\nimport { BigNumber, Contract, ethers } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport ERC20 from './ERC20';\nimport { getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\n\n/**\n * An API module of Gaea Coin contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class BasisCash {\n  constructor(cfg) {\n    this.myAccount = void 0;\n    this.provider = void 0;\n    this.signer = void 0;\n    this.config = void 0;\n    this.contracts = void 0;\n    this.externalTokens = void 0;\n    this.boardroomVersionOfUser = void 0;\n    this.GAC = void 0;\n    this.GAS = void 0;\n    this.GAB = void 0;\n    const {\n      deployments,\n      externalTokens\n    } = cfg;\n    const provider = getDefaultProvider(); // loads contracts from deployments\n\n    this.contracts = {};\n\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n\n    this.externalTokens = {};\n\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal); // TODO: add decimal\n    }\n\n    this.GAC = new ERC20(deployments.Cash.address, provider, 'GAC');\n    this.GAS = new ERC20(deployments.Share.address, provider, 'GAS');\n    this.GAB = new ERC20(deployments.Bond.address, provider, 'GAB');\n    this.config = cfg;\n    this.provider = provider;\n  }\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n\n\n  unlockWallet(provider, account) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n\n    const tokens = [this.GAC, this.GAS, this.GAB, ...Object.values(this.externalTokens)];\n\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n\n    this.fetchBoardroomVersionOfUser().then(version => this.boardroomVersionOfUser = version).catch(err => {\n      console.error(`Failed to fetch boardroom version: ${err.stack}`);\n      this.boardroomVersionOfUser = 'latest';\n    });\n  }\n\n  get isUnlocked() {\n    return !!this.myAccount;\n  }\n\n  gasOptions(gas) {\n    const multiplied = Math.floor(gas.toNumber() * this.config.gasLimitMultiplier);\n    console.log(`⛽️ Gas multiplied: ${gas} -> ${multiplied}`);\n    return {\n      gasLimit: BigNumber.from(multiplied)\n    };\n  }\n  /**\n   * @returns Gaea Coin (GAC) stats from Uniswap.\n   * It may differ from the GAC price used on Treasury (which is calculated in TWAP)\n   */\n\n\n  async getCashStatFromUniswap() {\n    const supply = await this.GAC.displayedTotalSupply();\n    return {\n      priceInDAI: await this.getTokenPriceFromUniswap(this.GAC),\n      totalSupply: supply\n    };\n  }\n  /**\n   * @returns Estimated Gaea Coin (GAC) price data,\n   * calculated by 1-day Time-Weight Averaged Price (TWAP).\n   */\n\n\n  async getCashStatInEstimatedTWAP() {\n    const {\n      SeigniorageOracle\n    } = this.contracts;\n    const expectedPrice = await SeigniorageOracle.expectedPrice(this.GAC.address, ethers.utils.parseEther('1'));\n    const supply = await this.GAC.displayedTotalSupply();\n    return {\n      priceInDAI: getDisplayBalance(expectedPrice),\n      totalSupply: supply\n    };\n  }\n\n  async getCashPriceInLastTWAP() {\n    const {\n      Treasury\n    } = this.contracts;\n    return Treasury.getSeigniorageOraclePrice();\n  }\n\n  async getBondOraclePriceInLastTWAP() {\n    const {\n      Treasury\n    } = this.contracts;\n    return Treasury.getBondOraclePrice();\n  }\n\n  async getBondStat() {\n    const decimals = BigNumber.from(10).pow(18);\n    const cashPrice = await this.getBondOraclePriceInLastTWAP();\n    const bondPrice = cashPrice.pow(2).div(decimals);\n    console.log(': getDisplayBalance(bondPrice)', getDisplayBalance(bondPrice));\n    return {\n      priceInDAI: getDisplayBalance(bondPrice),\n      totalSupply: await this.GAB.displayedTotalSupply()\n    };\n  }\n\n  async getShareStat() {\n    return {\n      priceInDAI: await this.getTokenPriceFromUniswap(this.GAS),\n      totalSupply: await this.GAS.displayedTotalSupply()\n    };\n  }\n\n  async getTokenPriceFromUniswap(tokenContract) {\n    await this.provider.ready;\n    const {\n      chainId\n    } = this.config;\n    const {\n      USDT\n    } = this.config.externalTokens;\n    const dai = new Token(chainId, USDT[0], 18);\n    const token = new Token(chainId, tokenContract.address, 18);\n\n    try {\n      const daiToToken = await Fetcher.fetchPairData(dai, token, this.provider);\n      const priceInDAI = new Route([daiToToken], token);\n      return priceInDAI.midPrice.toSignificant(3);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n  /**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */\n\n\n  async buyBonds(amount) {\n    const {\n      Treasury\n    } = this.contracts;\n    return await Treasury.buyBonds(decimalToBalance(amount), (await this.getBondOraclePriceInLastTWAP()));\n  }\n  /**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */\n\n\n  async redeemBonds(amount) {\n    const {\n      Treasury\n    } = this.contracts;\n    return await Treasury.redeemBonds(decimalToBalance(amount));\n  }\n\n  async earnedFromBank(poolName, account = this.myAccount) {\n    const pool = this.contracts[poolName];\n\n    try {\n      return await pool.earned(account);\n    } catch (err) {\n      console.error(`Failed to call earned() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName, account = this.myAccount) {\n    const pool = this.contracts[poolName];\n\n    try {\n      return await pool.balanceOf(account);\n    } catch (err) {\n      console.error(`Failed to call balanceOf() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n\n\n  async stake(poolName, amount, bank) {\n    const pool = this.contracts[poolName];\n    var gasObj = {\n      gasLimit: 2300000\n    };\n    var parm = bank.depositTokenName === 'BNB' ? { ...gasObj,\n      value: amount\n    } : gasObj;\n    return await pool.stake(amount, parm);\n  }\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n\n\n  async unstake(poolName, amount) {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.withdraw(amount);\n    return await pool.withdraw(amount, this.gasOptions(gas));\n  }\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n\n\n  async harvest(poolName) {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.getReward();\n    return await pool.getReward(this.gasOptions(gas));\n  }\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n\n\n  async exit(poolName) {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.exit();\n    return await pool.exit(this.gasOptions(gas));\n  }\n\n  async fetchBoardroomVersionOfUser() {\n    // const { Boardroom1, Boardroom2 } = this.contracts;\n    // const balance1 = await Boardroom1.getShareOf(this.myAccount);\n    // if (balance1.gt(0)) {\n    //   console.log(\n    //     `👀 The user is using Boardroom v1. (Staked ${getDisplayBalance(balance1)} GAS)`,\n    //   );\n    //   return 'v1';\n    // }\n    // const balance2 = await Boardroom2.balanceOf(this.myAccount);\n    // if (balance2.gt(0)) {\n    //   console.log(\n    //     `👀 The user is using Boardroom v2. (Staked ${getDisplayBalance(balance2)} GAS)`,\n    //   );\n    //   return 'v2';\n    // }\n    return 'latest';\n  }\n\n  boardroomByVersion(version) {\n    if (version === 'v1') {\n      return this.contracts.Boardroom1;\n    }\n\n    if (version === 'v2') {\n      return this.contracts.Boardroom2;\n    }\n\n    return this.contracts.Boardroom3;\n  }\n\n  currentBoardroom() {\n    if (!this.boardroomVersionOfUser) {\n      throw new Error('you must unlock the wallet to continue.');\n    }\n\n    return this.boardroomByVersion(this.boardroomVersionOfUser);\n  }\n\n  isOldBoardroomMember() {\n    return this.boardroomVersionOfUser !== 'latest';\n  }\n\n  async stakeShareToBoardroom(amount) {\n    if (this.isOldBoardroomMember()) {\n      throw new Error(\"you're using old Boardroom. please withdraw and deposit the GAS again.\");\n    }\n\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.stake(decimalToBalance(amount));\n  }\n\n  async getStakedSharesOnBoardroom() {\n    const Boardroom = this.currentBoardroom();\n\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getShareOf(this.myAccount);\n    }\n\n    return await Boardroom.balanceOf(this.myAccount);\n  }\n\n  async getEarningsOnBoardroom() {\n    const Boardroom = this.currentBoardroom();\n\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getCashEarningsOf(this.myAccount);\n    }\n\n    return await Boardroom.earned(this.myAccount);\n  }\n\n  async withdrawShareFromBoardroom(amount) {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromBoardroom() {\n    const Boardroom = this.currentBoardroom();\n\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.claimDividends();\n    }\n\n    return await Boardroom.claimReward();\n  }\n\n  async exitFromBoardroom() {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.exit();\n  }\n\n  async getTreasuryNextAllocationTime() {\n    const {\n      Treasury\n    } = this.contracts;\n    const nextEpochTimestamp = await Treasury.nextEpochPoint();\n    const period = await Treasury.getPeriod();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(nextAllocation.getTime() - period.toNumber() * 1000);\n    return {\n      prevAllocation,\n      nextAllocation\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/basis-cash/BasisCash.ts"],"names":["Fetcher","Route","Token","BigNumber","Contract","ethers","decimalToBalance","ERC20","getDisplayBalance","getDefaultProvider","BasisCash","constructor","cfg","myAccount","provider","signer","config","contracts","externalTokens","boardroomVersionOfUser","GAC","GAS","GAB","deployments","name","deployment","Object","entries","address","abi","symbol","decimal","Cash","Share","Bond","unlockWallet","account","newProvider","providers","Web3Provider","chainId","getSigner","contract","connect","tokens","values","token","fetchBoardroomVersionOfUser","then","version","catch","err","console","error","stack","isUnlocked","gasOptions","gas","multiplied","Math","floor","toNumber","gasLimitMultiplier","log","gasLimit","from","getCashStatFromUniswap","supply","displayedTotalSupply","priceInDAI","getTokenPriceFromUniswap","totalSupply","getCashStatInEstimatedTWAP","SeigniorageOracle","expectedPrice","utils","parseEther","getCashPriceInLastTWAP","Treasury","getSeigniorageOraclePrice","getBondOraclePriceInLastTWAP","getBondOraclePrice","getBondStat","decimals","pow","cashPrice","bondPrice","div","getShareStat","tokenContract","ready","USDT","dai","daiToToken","fetchPairData","midPrice","toSignificant","buyBonds","amount","redeemBonds","earnedFromBank","poolName","pool","earned","stakedBalanceOnBank","balanceOf","stake","bank","gasObj","parm","depositTokenName","value","unstake","estimateGas","withdraw","harvest","getReward","exit","boardroomByVersion","Boardroom1","Boardroom2","Boardroom3","currentBoardroom","Error","isOldBoardroomMember","stakeShareToBoardroom","Boardroom","getStakedSharesOnBoardroom","getShareOf","getEarningsOnBoardroom","getCashEarningsOf","withdrawShareFromBoardroom","harvestCashFromBoardroom","claimDividends","claimReward","exitFromBoardroom","getTreasuryNextAllocationTime","nextEpochTimestamp","nextEpochPoint","period","getPeriod","nextAllocation","Date","mul","prevAllocation","getTime"],"mappings":"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","sourcesContent":["//@ts-nocheck\nimport { Fetcher, Route, Token } from '@uniswap/sdk';\nimport { Configuration } from './config';\nimport { ContractName, TokenStat, TreasuryAllocationTime } from './types';\nimport { BigNumber, Contract, ethers, Overrides } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport ERC20 from './ERC20';\nimport { getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\n\n/**\n * An API module of Gaea Coin contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class BasisCash {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  boardroomVersionOfUser?: string;\n  GAC: ERC20;\n  GAS: ERC20;\n  GAB: ERC20;\n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n\n    // loads contracts from deployments\n    this.contracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n    this.externalTokens = {};\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal); // TODO: add decimal\n    }\n\n    this.GAC = new ERC20(deployments.Cash.address, provider, 'GAC');\n    this.GAS = new ERC20(deployments.Share.address, provider, 'GAS');\n    this.GAB = new ERC20(deployments.Bond.address, provider, 'GAB');\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [this.GAC, this.GAS, this.GAB, ...Object.values(this.externalTokens)];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n\n    this.fetchBoardroomVersionOfUser()\n      .then((version) => (this.boardroomVersionOfUser = version))\n      .catch((err) => {\n        console.error(`Failed to fetch boardroom version: ${err.stack}`);\n        this.boardroomVersionOfUser = 'latest';\n      });\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  gasOptions(gas: BigNumber): Overrides {\n    const multiplied = Math.floor(gas.toNumber() * this.config.gasLimitMultiplier);\n    console.log(`⛽️ Gas multiplied: ${gas} -> ${multiplied}`);\n    return {\n      gasLimit: BigNumber.from(multiplied),\n    };\n  }\n\n  /**\n   * @returns Gaea Coin (GAC) stats from Uniswap.\n   * It may differ from the GAC price used on Treasury (which is calculated in TWAP)\n   */\n  async getCashStatFromUniswap(): Promise<TokenStat> {\n    const supply = await this.GAC.displayedTotalSupply();\n    return {\n      priceInDAI: await this.getTokenPriceFromUniswap(this.GAC),\n      totalSupply: supply,\n    };\n  }\n\n  /**\n   * @returns Estimated Gaea Coin (GAC) price data,\n   * calculated by 1-day Time-Weight Averaged Price (TWAP).\n   */\n  async getCashStatInEstimatedTWAP(): Promise<TokenStat> {\n    const { SeigniorageOracle } = this.contracts;\n\n    const expectedPrice = await SeigniorageOracle.expectedPrice(\n      this.GAC.address,\n      ethers.utils.parseEther('1'),\n    );\n    const supply = await this.GAC.displayedTotalSupply();\n\n    return {\n      priceInDAI: getDisplayBalance(expectedPrice),\n      totalSupply: supply,\n    };\n  }\n\n  async getCashPriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getSeigniorageOraclePrice();\n  }\n\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBondOraclePrice();\n  }\n\n  async getBondStat(): Promise<TokenStat> {\n    const decimals = BigNumber.from(10).pow(18);\n\n    const cashPrice: BigNumber = await this.getBondOraclePriceInLastTWAP();\n    const bondPrice = cashPrice.pow(2).div(decimals);\n    console.log(': getDisplayBalance(bondPrice)', getDisplayBalance(bondPrice));\n    return {\n      priceInDAI: getDisplayBalance(bondPrice),\n      totalSupply: await this.GAB.displayedTotalSupply(),\n    };\n  }\n\n  async getShareStat(): Promise<TokenStat> {\n    return {\n      priceInDAI: await this.getTokenPriceFromUniswap(this.GAS),\n      totalSupply: await this.GAS.displayedTotalSupply(),\n    };\n  }\n\n  async getTokenPriceFromUniswap(tokenContract: ERC20): Promise<string> {\n    await this.provider.ready;\n\n    const { chainId } = this.config;\n    const { USDT } = this.config.externalTokens;\n\n    const dai = new Token(chainId, USDT[0], 18);\n    const token = new Token(chainId, tokenContract.address, 18);\n\n    try {\n      const daiToToken = await Fetcher.fetchPairData(dai, token, this.provider);\n      const priceInDAI = new Route([daiToToken], token);\n      return priceInDAI.midPrice.toSignificant(3);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  /**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    return await Treasury.buyBonds(\n      decimalToBalance(amount),\n      await this.getBondOraclePriceInLastTWAP(),\n    );\n  }\n\n  /**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */\n  async redeemBonds(amount: string): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    return await Treasury.redeemBonds(decimalToBalance(amount));\n  }\n\n  async earnedFromBank(poolName: ContractName, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      return await pool.earned(account);\n    } catch (err) {\n      console.error(`Failed to call earned() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(\n    poolName: ContractName,\n    account = this.myAccount,\n  ): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      return await pool.balanceOf(account);\n    } catch (err) {\n      console.error(`Failed to call balanceOf() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(\n    poolName: ContractName,\n    amount: BigNumber,\n    bank: any,\n  ): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    var gasObj = {\n      gasLimit: 2300000,\n    };\n    var parm = bank.depositTokenName === 'BNB' ? { ...gasObj, value: amount } : gasObj;\n    return await pool.stake(amount, parm);\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(poolName: ContractName, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.withdraw(amount);\n    return await pool.withdraw(amount, this.gasOptions(gas));\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.getReward();\n    return await pool.getReward(this.gasOptions(gas));\n  }\n\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n  async exit(poolName: ContractName): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.exit();\n    return await pool.exit(this.gasOptions(gas));\n  }\n\n  async fetchBoardroomVersionOfUser(): Promise<string> {\n    // const { Boardroom1, Boardroom2 } = this.contracts;\n    // const balance1 = await Boardroom1.getShareOf(this.myAccount);\n    // if (balance1.gt(0)) {\n    //   console.log(\n    //     `👀 The user is using Boardroom v1. (Staked ${getDisplayBalance(balance1)} GAS)`,\n    //   );\n    //   return 'v1';\n    // }\n    // const balance2 = await Boardroom2.balanceOf(this.myAccount);\n    // if (balance2.gt(0)) {\n    //   console.log(\n    //     `👀 The user is using Boardroom v2. (Staked ${getDisplayBalance(balance2)} GAS)`,\n    //   );\n    //   return 'v2';\n    // }\n    return 'latest';\n  }\n\n  boardroomByVersion(version: string): Contract {\n    if (version === 'v1') {\n      return this.contracts.Boardroom1;\n    }\n    if (version === 'v2') {\n      return this.contracts.Boardroom2;\n    }\n    return this.contracts.Boardroom3;\n  }\n\n  currentBoardroom(): Contract {\n    if (!this.boardroomVersionOfUser) {\n      throw new Error('you must unlock the wallet to continue.');\n    }\n    return this.boardroomByVersion(this.boardroomVersionOfUser);\n  }\n\n  isOldBoardroomMember(): boolean {\n    return this.boardroomVersionOfUser !== 'latest';\n  }\n\n  async stakeShareToBoardroom(amount: string): Promise<TransactionResponse> {\n    if (this.isOldBoardroomMember()) {\n      throw new Error(\"you're using old Boardroom. please withdraw and deposit the GAS again.\");\n    }\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.stake(decimalToBalance(amount));\n  }\n\n  async getStakedSharesOnBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getShareOf(this.myAccount);\n    }\n    return await Boardroom.balanceOf(this.myAccount);\n  }\n\n  async getEarningsOnBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getCashEarningsOf(this.myAccount);\n    }\n    return await Boardroom.earned(this.myAccount);\n  }\n\n  async withdrawShareFromBoardroom(amount: string): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromBoardroom(): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.claimDividends();\n    }\n    return await Boardroom.claimReward();\n  }\n\n  async exitFromBoardroom(): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.exit();\n  }\n\n  async getTreasuryNextAllocationTime(): Promise<TreasuryAllocationTime> {\n    const { Treasury } = this.contracts;\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\n    const period: BigNumber = await Treasury.getPeriod();\n\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(nextAllocation.getTime() - period.toNumber() * 1000);\n    return { prevAllocation, nextAllocation };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}