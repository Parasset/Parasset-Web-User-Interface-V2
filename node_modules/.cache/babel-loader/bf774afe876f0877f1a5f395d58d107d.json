{"ast":null,"code":"//@ts-nocheck\nimport { useCallback, useEffect, useState } from \"react\";\nimport useBasisCash from \"./useBasisCash\"; // import { useBlockNumber } from \"../state/application/hooks\";\n\nconst useMineInfo = mine => {\n  const [staked, setStaked] = useState(0);\n  const [earned, setEarned] = useState(0);\n  const [info, setInfo] = useState({\n    rewardRate: 0,\n    totalSupply: 0\n  });\n  const basisCash = useBasisCash();\n  const block = useBlockNumber();\n  const fetchStaked = useCallback(async (address = basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount) => {\n    var _mine$depositToken;\n\n    const staked = await basisCash.getStaked(mine === null || mine === void 0 ? void 0 : (_mine$depositToken = mine.depositToken) === null || _mine$depositToken === void 0 ? void 0 : _mine$depositToken.address, address);\n    setStaked(staked);\n    return staked;\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount, mine]);\n  const fetchEarned = useCallback(async (address = basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount) => {\n    var _mine$depositToken2;\n\n    const earned = await basisCash.getEarned(mine === null || mine === void 0 ? void 0 : (_mine$depositToken2 = mine.depositToken) === null || _mine$depositToken2 === void 0 ? void 0 : _mine$depositToken2.address, address);\n    setEarned(earned);\n    return earned;\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount, mine]);\n  const fetchChannelInfo = useCallback(async () => {\n    var _mine$depositToken3;\n\n    const info = await basisCash.getChannelInfo(mine === null || mine === void 0 ? void 0 : (_mine$depositToken3 = mine.depositToken) === null || _mine$depositToken3 === void 0 ? void 0 : _mine$depositToken3.address, block);\n    setInfo(info);\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount, mine, block]);\n  const fetchInfo = useCallback(async () => {\n    fetchStaked();\n    fetchEarned();\n    fetchChannelInfo();\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount, mine, block]);\n  useEffect(() => {\n    if (basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount) {\n      fetchInfo();\n    }\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount, block, mine]);\n  return {\n    staked,\n    earned,\n    info\n  };\n};\n\nexport default useMineInfo;","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/hooks/useMineInfo.ts"],"names":["useCallback","useEffect","useState","useBasisCash","useMineInfo","mine","staked","setStaked","earned","setEarned","info","setInfo","rewardRate","totalSupply","basisCash","block","useBlockNumber","fetchStaked","address","myAccount","getStaked","depositToken","fetchEarned","getEarned","fetchChannelInfo","getChannelInfo","fetchInfo"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,OAAOC,YAAP,MAAyB,gBAAzB,C,CACA;;AAEA,MAAMC,WAAW,GAAIC,IAAD,IAAU;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC;AAC/BU,IAAAA,UAAU,EAAE,CADmB;AAE/BC,IAAAA,WAAW,EAAE;AAFkB,GAAD,CAAhC;AAIA,QAAMC,SAAS,GAAGX,YAAY,EAA9B;AACA,QAAMY,KAAK,GAAGC,cAAc,EAA5B;AAEA,QAAMC,WAAW,GAAGjB,WAAW,CAC7B,OAAOkB,OAAO,GAAGJ,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEK,SAA5B,KAA0C;AAAA;;AACxC,UAAMb,MAAM,GAAG,MAAMQ,SAAS,CAACM,SAAV,CAAoBf,IAApB,aAAoBA,IAApB,6CAAoBA,IAAI,CAAEgB,YAA1B,uDAAoB,mBAAoBH,OAAxC,EAAiDA,OAAjD,CAArB;AACAX,IAAAA,SAAS,CAACD,MAAD,CAAT;AACA,WAAOA,MAAP;AACD,GAL4B,EAM7B,CAACQ,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEK,SAAZ,EAAuBd,IAAvB,CAN6B,CAA/B;AAQA,QAAMiB,WAAW,GAAGtB,WAAW,CAC7B,OAAOkB,OAAO,GAAGJ,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEK,SAA5B,KAA0C;AAAA;;AACxC,UAAMX,MAAM,GAAG,MAAMM,SAAS,CAACS,SAAV,CAAoBlB,IAApB,aAAoBA,IAApB,8CAAoBA,IAAI,CAAEgB,YAA1B,wDAAoB,oBAAoBH,OAAxC,EAAiDA,OAAjD,CAArB;AACAT,IAAAA,SAAS,CAACD,MAAD,CAAT;AACA,WAAOA,MAAP;AACD,GAL4B,EAM7B,CAACM,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEK,SAAZ,EAAuBd,IAAvB,CAN6B,CAA/B;AAQA,QAAMmB,gBAAgB,GAAGxB,WAAW,CAAC,YAAY;AAAA;;AAC/C,UAAMU,IAAI,GAAG,MAAMI,SAAS,CAACW,cAAV,CAAyBpB,IAAzB,aAAyBA,IAAzB,8CAAyBA,IAAI,CAAEgB,YAA/B,wDAAyB,oBAAoBH,OAA7C,EAAsDH,KAAtD,CAAnB;AAEAJ,IAAAA,OAAO,CAACD,IAAD,CAAP;AACD,GAJmC,EAIjC,CAACI,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEK,SAAZ,EAAuBd,IAAvB,EAA6BU,KAA7B,CAJiC,CAApC;AAMA,QAAMW,SAAS,GAAG1B,WAAW,CAAC,YAAY;AACxCiB,IAAAA,WAAW;AACXK,IAAAA,WAAW;AACXE,IAAAA,gBAAgB;AACjB,GAJ4B,EAI1B,CAACV,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEK,SAAZ,EAAuBd,IAAvB,EAA6BU,KAA7B,CAJ0B,CAA7B;AAMAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAEK,SAAf,EAA0B;AACxBO,MAAAA,SAAS;AACV;AACF,GAJQ,EAIN,CAACZ,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEK,SAAZ,EAAuBJ,KAAvB,EAA8BV,IAA9B,CAJM,CAAT;AAMA,SAAO;AAAEC,IAAAA,MAAF;AAAUE,IAAAA,MAAV;AAAiBE,IAAAA;AAAjB,GAAP;AACD,CA7CD;;AA+CA,eAAeN,WAAf","sourcesContent":["//@ts-nocheck\nimport { useCallback, useEffect, useState } from \"react\";\nimport BigNumber1 from \"bignumber.js\";\nimport useBasisCash from \"./useBasisCash\";\n// import { useBlockNumber } from \"../state/application/hooks\";\n\nconst useMineInfo = (mine) => {\n  const [staked, setStaked] = useState(0);\n  const [earned, setEarned] = useState(0);\n  const [info, setInfo] = useState({\n    rewardRate: 0,\n    totalSupply: 0,\n  });\n  const basisCash = useBasisCash();\n  const block = useBlockNumber();\n\n  const fetchStaked = useCallback(\n    async (address = basisCash?.myAccount) => {\n      const staked = await basisCash.getStaked(mine?.depositToken?.address, address);\n      setStaked(staked);\n      return staked;\n    },\n    [basisCash?.myAccount, mine]\n  );\n  const fetchEarned = useCallback(\n    async (address = basisCash?.myAccount) => {\n      const earned = await basisCash.getEarned(mine?.depositToken?.address, address);\n      setEarned(earned);\n      return earned;\n    },\n    [basisCash?.myAccount, mine]\n  );\n  const fetchChannelInfo = useCallback(async () => {\n    const info = await basisCash.getChannelInfo(mine?.depositToken?.address, block);\n\n    setInfo(info);\n  }, [basisCash?.myAccount, mine, block]);\n\n  const fetchInfo = useCallback(async () => {\n    fetchStaked();\n    fetchEarned();\n    fetchChannelInfo();\n  }, [basisCash?.myAccount, mine, block]);\n\n  useEffect(() => {\n    if (basisCash?.myAccount) {\n      fetchInfo();\n    }\n  }, [basisCash?.myAccount, block, mine]);\n\n  return { staked, earned,info };\n};\n\nexport default useMineInfo;\n"]},"metadata":{},"sourceType":"module"}