{"ast":null,"code":"//@ts-nocheck\nimport { useCallback, useMemo } from \"react\";\nimport { addPopup, removePopup, toggleWalletModal1, toggleWalletModal, toggleStatus, updateTransactionHash, toggleSettingsMenu } from \"./actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useWallet } from \"use-wallet\";\nexport function useBlockNumber() {\n  const {\n    chainId\n  } = useWallet();\n  return useSelector(state => state.application.blockNumber[chainId !== null && chainId !== void 0 ? chainId : -1]);\n}\nexport function useWalletModalOpen() {\n  return useSelector(state => state.application.walletModalOpen);\n}\nexport function useWalletModalToggle() {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\nexport function useSettingsMenuOpen() {\n  return useSelector(state => state.application.settingsMenuOpen);\n}\nexport function useToggleSettingsMenu() {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n} // returns a function that allows adding a popup\n\nexport function useAddPopup() {\n  const dispatch = useDispatch();\n  return useCallback((content, key) => {\n    dispatch(addPopup({\n      content,\n      key\n    }));\n  }, [dispatch]);\n} // returns a function that allows removing a popup via its key\n\nexport function useRemovePopup() {\n  const dispatch = useDispatch();\n  return useCallback(key => {\n    dispatch(removePopup({\n      key\n    }));\n  }, [dispatch]);\n} // get the list of active popups\n\nexport function useActivePopups() {\n  const list = useSelector(state => state.application.popupList);\n  return useMemo(() => list.filter(item => item.show), [list]);\n}\nexport function useWalletModalToggle1() {\n  const dispatch = useDispatch();\n  return useCallback(walletModalOpen1 => dispatch(toggleWalletModal1({\n    walletModalOpen1\n  })), [dispatch]);\n}\nexport function useWaitModal() {\n  return useSelector(state => {\n    return state.application.walletModalOpen1;\n  });\n}\nexport function useUpdateTransactionHash() {\n  const dispatch = useDispatch();\n  return useCallback(transactionHash => dispatch(updateTransactionHash({\n    transactionHash\n  })), [dispatch]);\n}\nexport function useTransactionHash() {\n  return useSelector(state => {\n    return state.application.transactionHash;\n  });\n}\nexport function useStatusToggle() {\n  const dispatch = useDispatch();\n  return useCallback(status => dispatch(toggleStatus({\n    status\n  })), [dispatch]);\n}\nexport function useStatus() {\n  return useSelector(state => {\n    return state.application.status;\n  });\n}","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/state/application/hooks.ts"],"names":["useCallback","useMemo","addPopup","removePopup","toggleWalletModal1","toggleWalletModal","toggleStatus","updateTransactionHash","toggleSettingsMenu","useSelector","useDispatch","useWallet","useBlockNumber","chainId","state","application","blockNumber","useWalletModalOpen","walletModalOpen","useWalletModalToggle","dispatch","useSettingsMenuOpen","settingsMenuOpen","useToggleSettingsMenu","useAddPopup","content","key","useRemovePopup","useActivePopups","list","popupList","filter","item","show","useWalletModalToggle1","walletModalOpen1","useWaitModal","useUpdateTransactionHash","transactionHash","useTransactionHash","useStatusToggle","status","useStatus"],"mappings":"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","sourcesContent":["//@ts-nocheck\nimport { useCallback, useMemo } from \"react\";\nimport {\n  addPopup,\n  PopupContent,\n  removePopup,\n  toggleWalletModal1,\n  toggleWalletModal,\n  toggleStatus,\n  updateTransactionHash,\n  toggleSettingsMenu,\n} from \"./actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { AppState } from \"../index\";\nimport { useWallet } from \"use-wallet\";\n\nexport function useBlockNumber(): number | undefined {\n  const { chainId } = useWallet();\n  return useSelector(\n    (state: AppState) => state.application.blockNumber[chainId ?? -1]\n  );\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen);\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch();\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({ content, key }));\n    },\n    [dispatch]\n  );\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch();\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({ key }));\n    },\n    [dispatch]\n  );\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState[\"application\"][\"popupList\"] {\n  const list = useSelector((state: AppState) => state.application.popupList);\n  return useMemo(() => list.filter((item) => item.show), [list]);\n}\nexport function useWalletModalToggle1() {\n  const dispatch = useDispatch();\n  return useCallback(\n    (walletModalOpen1) => dispatch(toggleWalletModal1({ walletModalOpen1 })),\n    [dispatch]\n  );\n}\n\nexport function useWaitModal() {\n  return useSelector((state) => {\n    return state.application.walletModalOpen1;\n  });\n}\n\nexport function useUpdateTransactionHash() {\n  const dispatch = useDispatch();\n  return useCallback(\n    (transactionHash) => dispatch(updateTransactionHash({ transactionHash })),\n    [dispatch]\n  );\n}\n\nexport function useTransactionHash() {\n  return useSelector((state) => {\n    return state.application.transactionHash;\n  });\n}\nexport function useStatusToggle() {\n  const dispatch = useDispatch();\n  return useCallback((status) => dispatch(toggleStatus({ status })), [\n    dispatch,\n  ]);\n}\nexport function useStatus() {\n  return useSelector((state) => {\n    return state.application.status;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}