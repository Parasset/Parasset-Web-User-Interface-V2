{"ast":null,"code":"var _jsxFileName = \"/Users/miczero/ParaAsset/src/components/Value/Value.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport CountUp from 'react-countup';\nimport styled from 'styled-components';\n\nconst Value = ({\n  value,\n  decimals,\n  defaultStyle,\n  symbol,\n  className\n}) => {\n  const [start, updateStart] = useState(0);\n  const [end, updateEnd] = useState(0);\n  useEffect(() => {\n    updateStart(end);\n    updateEnd(parseFloat(value) || 0);\n  }, [value]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, defaultStyle ? /*#__PURE__*/React.createElement(CountUp, {\n    start: start,\n    end: end,\n    decimals: decimals !== undefined ? decimals : end < 0 ? 4 : end > 1e5 ? 0 : 3,\n    duration: 1,\n    separator: \",\",\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(StyledValue, {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CountUp, {\n    start: start,\n    end: end,\n    decimals: decimals !== undefined ? decimals : end < 0 ? 4 : end > 1e5 ? 0 : 3,\n    duration: 1,\n    separator: \",\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }), symbol));\n};\n\nconst StyledValue = styled.div`\n\n`;\nexport default Value; // //@ts-nocheck\n// import React, { useMemo } from 'react'\n// import BigNumber from 'bignumber.js'\n// export default function FormatValue({ value, decimals = 3, placeholder, showAll }) {\n//   const formatValue = useMemo(() => {\n//     return parseFloat(value)\n//       ? showAll\n//         ? new BigNumber(value).toFormat()\n//         : new BigNumber(value).toFormat(decimals)\n//       : placeholder\n//       ? '-'\n//       : value\n//   }, [value, decimals, placeholder])\n//   return <> {formatValue}</>\n// }","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/components/Value/Value.tsx"],"names":["React","useState","useEffect","CountUp","styled","Value","value","decimals","defaultStyle","symbol","className","start","updateStart","end","updateEnd","parseFloat","undefined","StyledValue","div"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;;AAWA,MAAMC,KAA2B,GAAG,CAAC;AACnCC,EAAAA,KADmC;AAEnCC,EAAAA,QAFmC;AAGnCC,EAAAA,YAHmC;AAInCC,EAAAA,MAJmC;AAKnCC,EAAAA;AALmC,CAAD,KAM9B;AACJ,QAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBX,QAAQ,CAAC,CAAD,CAArC;AACA,QAAM,CAACY,GAAD,EAAMC,SAAN,IAAmBb,QAAQ,CAAC,CAAD,CAAjC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,WAAW,CAACC,GAAD,CAAX;AACAC,IAAAA,SAAS,CAACC,UAAU,CAACT,KAAD,CAAV,IAAqB,CAAtB,CAAT;AACD,GAHQ,EAGN,CAACA,KAAD,CAHM,CAAT;AAKA,sBACE,0CACGE,YAAY,gBACX,oBAAC,OAAD;AACE,IAAA,KAAK,EAAEG,KADT;AAEE,IAAA,GAAG,EAAEE,GAFP;AAGE,IAAA,QAAQ,EACNN,QAAQ,KAAKS,SAAb,GAAyBT,QAAzB,GAAoCM,GAAG,GAAG,CAAN,GAAU,CAAV,GAAcA,GAAG,GAAG,GAAN,GAAY,CAAZ,GAAgB,CAJtE;AAME,IAAA,QAAQ,EAAE,CANZ;AAOE,IAAA,SAAS,EAAC,GAPZ;AAQE,IAAA,SAAS,EAAEH,SARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADW,gBAYX,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEA,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAEC,KADT;AAEE,IAAA,GAAG,EAAEE,GAFP;AAGE,IAAA,QAAQ,EACNN,QAAQ,KAAKS,SAAb,GACIT,QADJ,GAEIM,GAAG,GAAG,CAAN,GACA,CADA,GAEAA,GAAG,GAAG,GAAN,GACA,CADA,GAEA,CAVR;AAYE,IAAA,QAAQ,EAAE,CAZZ;AAaE,IAAA,SAAS,EAAC,GAbZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAiBGJ,MAjBH,CAbJ,CADF;AAoCD,CAnDD;;AAqDA,MAAMQ,WAAW,GAAGb,MAAM,CAACc,GAAI;;CAA/B;AAIA,eAAeb,KAAf,C,CACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport CountUp from 'react-countup'\n\nimport styled from 'styled-components'\n\ninterface ValueProps {\n  value: any\n  decimals?: number\n  defaultStyle?: boolean\n  name?:string\n  className?: string\n  symbol?: any\n}\n\nconst Value: React.FC<ValueProps> = ({\n  value,\n  decimals,\n  defaultStyle,\n  symbol,\n  className\n}) => {\n  const [start, updateStart] = useState(0)\n  const [end, updateEnd] = useState(0)\n\n  useEffect(() => {\n    updateStart(end)\n    updateEnd(parseFloat(value) || 0)\n  }, [value])\n\n  return (\n    <>\n      {defaultStyle ? (\n        <CountUp\n          start={start}\n          end={end}\n          decimals={\n            decimals !== undefined ? decimals : end < 0 ? 4 : end > 1e5 ? 0 : 3\n          }\n          duration={1}\n          separator=\",\"\n          className={className}\n        />\n      ) : (\n        <StyledValue className={className}>\n          \n          <CountUp\n            start={start}\n            end={end}\n            decimals={\n              decimals !== undefined\n                ? decimals\n                : end < 0\n                ? 4\n                : end > 1e5\n                ? 0\n                : 3\n            }\n            duration={1}\n            separator=\",\"\n          />\n          {symbol}\n        </StyledValue>\n      )}\n    </>\n  )\n}\n\nconst StyledValue = styled.div`\n\n`\n\nexport default Value\n// //@ts-nocheck\n// import React, { useMemo } from 'react'\n// import BigNumber from 'bignumber.js'\n\n// export default function FormatValue({ value, decimals = 3, placeholder, showAll }) {\n//   const formatValue = useMemo(() => {\n//     return parseFloat(value)\n//       ? showAll\n//         ? new BigNumber(value).toFormat()\n//         : new BigNumber(value).toFormat(decimals)\n//       : placeholder\n//       ? '-'\n//       : value\n//   }, [value, decimals, placeholder])\n//   return <> {formatValue}</>\n// }\n\n"]},"metadata":{},"sourceType":"module"}