{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\n\nconst useEncryptAddress = address => {\n  const {\n    account\n  } = useWallet();\n  const [newAddress, setNewAddress] = useState('');\n  const encryptAddress = useCallback(async () => {\n    setNewAddress(address.replace(/(\\w{4})\\w*(\\w{4})/, '$1******$2'));\n  }, [address]);\n  useEffect(() => {\n    if (account && address) {\n      encryptAddress();\n    }\n  }, [account, address]);\n  return newAddress;\n};\n\nexport default useEncryptAddress;","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/hooks/useEncryptAddress.ts"],"names":["useCallback","useEffect","useState","useWallet","useEncryptAddress","address","account","newAddress","setNewAddress","encryptAddress","replace"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAGA,MAAMC,iBAAiB,GAAIC,OAAD,IAAqB;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAcH,SAAS,EAA7B;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMO,cAAc,GAAGT,WAAW,CAAC,YAAY;AAC7CQ,IAAAA,aAAa,CAACH,OAAO,CAACK,OAAR,CAAgB,mBAAhB,EAAqC,YAArC,CAAD,CAAb;AACD,GAFiC,EAE/B,CAACL,OAAD,CAF+B,CAAlC;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,OAAO,IAAID,OAAf,EAAwB;AACtBI,MAAAA,cAAc;AACf;AACF,GAJQ,EAIN,CAACH,OAAD,EAAUD,OAAV,CAJM,CAAT;AAMA,SAAOE,UAAP;AACD,CAdD;;AAgBA,eAAeH,iBAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { useWallet } from 'use-wallet'\n\n\nconst useEncryptAddress = (address: string) => {\n  const { account } = useWallet()\n  const [newAddress, setNewAddress] = useState('')\n  const encryptAddress = useCallback(async () => {\n    setNewAddress(address.replace(/(\\w{4})\\w*(\\w{4})/, '$1******$2'))\n  }, [address])\n\n  useEffect(() => {\n    if (account && address) {\n      encryptAddress()\n    }\n  }, [account, address])\n\n  return newAddress\n}\n\nexport default useEncryptAddress\n"]},"metadata":{},"sourceType":"module"}