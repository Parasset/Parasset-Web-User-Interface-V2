{"ast":null,"code":"//@ts-nocheck\nimport { useCallback, useEffect, useState } from \"react\";\nimport useBasisCash from \"./useBasisCash\";\nimport { useBlockNumber } from \"../state/application/hooks\";\n\nconst useMineInfo = mine => {\n  const [staked, setStaked] = useState(0);\n  const [earned, setEarned] = useState(0);\n  const [info, setInfo] = useState({\n    endBlock: info.endBlock.toNumber(),\n    rewardRate: getTonumber(info.rewardRate),\n    totalSupply: 0\n  });\n  const basisCash = useBasisCash();\n  const block = useBlockNumber();\n  const fetchStaked = useCallback(async (address = basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount) => {\n    const staked = await basisCash.getStaked(mine.depositToken, address);\n    setStaked(staked);\n    return staked;\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount, mine]);\n  const fetchEarned = useCallback(async (address = basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount) => {\n    const earned = await basisCash.getEarned(mine.depositToken, address);\n    console.log('ðŸš€ ~ file: useMineInfo.ts ~ line 29 ~ earned', earned);\n    setEarned(earned);\n    return earned;\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount, mine]);\n  const fetchChannelInfo = useCallback(async () => {\n    const info = await basisCash.getChannelInfo(mine.depositToken);\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount, mine]);\n  const fetchInfo = useCallback(async () => {\n    fetchStaked();\n    fetchEarned();\n    fetchEarfetchChannelInfoned();\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount, mine]);\n  useEffect(() => {\n    if (basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount) {\n      fetchInfo();\n    }\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.myAccount, block, mine]);\n  return {\n    staked,\n    earned\n  };\n};\n\nexport default useMineInfo;","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/hooks/useMineInfo.ts"],"names":["useCallback","useEffect","useState","useBasisCash","useBlockNumber","useMineInfo","mine","staked","setStaked","earned","setEarned","info","setInfo","endBlock","toNumber","rewardRate","getTonumber","totalSupply","basisCash","block","fetchStaked","address","myAccount","getStaked","depositToken","fetchEarned","getEarned","console","log","fetchChannelInfo","getChannelInfo","fetchInfo","fetchEarfetchChannelInfoned"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,cAAT,QAA+B,4BAA/B;;AAEA,MAAMC,WAAW,GAAIC,IAAD,IAAU;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC;AAC/BW,IAAAA,QAAQ,EAAEF,IAAI,CAACE,QAAL,CAAcC,QAAd,EADqB;AAE/BC,IAAAA,UAAU,EAAEC,WAAW,CAACL,IAAI,CAACI,UAAN,CAFQ;AAG/BE,IAAAA,WAAW,EAAE;AAHkB,GAAD,CAAhC;AAKA,QAAMC,SAAS,GAAGf,YAAY,EAA9B;AACA,QAAMgB,KAAK,GAAGf,cAAc,EAA5B;AAEA,QAAMgB,WAAW,GAAGpB,WAAW,CAC7B,OAAOqB,OAAO,GAAGH,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEI,SAA5B,KAA0C;AACxC,UAAMf,MAAM,GAAG,MAAMW,SAAS,CAACK,SAAV,CAAoBjB,IAAI,CAACkB,YAAzB,EAAuCH,OAAvC,CAArB;AACAb,IAAAA,SAAS,CAACD,MAAD,CAAT;AACA,WAAOA,MAAP;AACD,GAL4B,EAM7B,CAACW,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEI,SAAZ,EAAuBhB,IAAvB,CAN6B,CAA/B;AAQA,QAAMmB,WAAW,GAAGzB,WAAW,CAC7B,OAAOqB,OAAO,GAAGH,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEI,SAA5B,KAA0C;AACxC,UAAMb,MAAM,GAAG,MAAMS,SAAS,CAACQ,SAAV,CAAoBpB,IAAI,CAACkB,YAAzB,EAAuCH,OAAvC,CAArB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA4DnB,MAA5D;AACAC,IAAAA,SAAS,CAACD,MAAD,CAAT;AACA,WAAOA,MAAP;AACD,GAN4B,EAO7B,CAACS,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEI,SAAZ,EAAuBhB,IAAvB,CAP6B,CAA/B;AASA,QAAMuB,gBAAgB,GAAG7B,WAAW,CAClC,YAAY;AACV,UAAMW,IAAI,GAAG,MAAMO,SAAS,CAACY,cAAV,CAAyBxB,IAAI,CAACkB,YAA9B,CAAnB;AAED,GAJiC,EAKlC,CAACN,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEI,SAAZ,EAAuBhB,IAAvB,CALkC,CAApC;AAQA,QAAMyB,SAAS,GAAG/B,WAAW,CAAC,YAAY;AACxCoB,IAAAA,WAAW;AACXK,IAAAA,WAAW;AACXO,IAAAA,2BAA2B;AAC5B,GAJ4B,EAI1B,CAACd,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEI,SAAZ,EAAuBhB,IAAvB,CAJ0B,CAA7B;AAMAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAEI,SAAf,EAA0B;AACxBS,MAAAA,SAAS;AACV;AACF,GAJQ,EAIN,CAACb,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEI,SAAZ,EAAuBH,KAAvB,EAA8Bb,IAA9B,CAJM,CAAT;AAMA,SAAO;AAAEC,IAAAA,MAAF;AAAUE,IAAAA;AAAV,GAAP;AACD,CAjDD;;AAmDA,eAAeJ,WAAf","sourcesContent":["//@ts-nocheck\nimport { useCallback, useEffect, useState } from \"react\";\nimport BigNumber1 from \"bignumber.js\";\nimport useBasisCash from \"./useBasisCash\";\nimport { useBlockNumber } from \"../state/application/hooks\";\n\nconst useMineInfo = (mine) => {\n  const [staked, setStaked] = useState(0);\n  const [earned, setEarned] = useState(0);\n  const [info, setInfo] = useState({\n    endBlock: info.endBlock.toNumber(),\n    rewardRate: getTonumber(info.rewardRate),\n    totalSupply: 0,\n  });\n  const basisCash = useBasisCash();\n  const block = useBlockNumber();\n\n  const fetchStaked = useCallback(\n    async (address = basisCash?.myAccount) => {\n      const staked = await basisCash.getStaked(mine.depositToken, address);\n      setStaked(staked);\n      return staked;\n    },\n    [basisCash?.myAccount, mine]\n  );\n  const fetchEarned = useCallback(\n    async (address = basisCash?.myAccount) => {\n      const earned = await basisCash.getEarned(mine.depositToken, address);\n      console.log('ðŸš€ ~ file: useMineInfo.ts ~ line 29 ~ earned', earned)\n      setEarned(earned);\n      return earned;\n    },\n    [basisCash?.myAccount, mine]\n  );\n  const fetchChannelInfo = useCallback(\n    async () => {\n      const info = await basisCash.getChannelInfo(mine.depositToken, );\n    \n    },\n    [basisCash?.myAccount, mine]\n  );\n  \n  const fetchInfo = useCallback(async () => {\n    fetchStaked();\n    fetchEarned();\n    fetchEarfetchChannelInfoned();\n  }, [basisCash?.myAccount, mine]);\n\n  useEffect(() => {\n    if (basisCash?.myAccount) {\n      fetchInfo();\n    }\n  }, [basisCash?.myAccount, block, mine]);\n\n  return { staked, earned };\n};\n\nexport default useMineInfo;\n"]},"metadata":{},"sourceType":"module"}