{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useBasisCash from './useBasisCash';\nimport config from '../config';\n\nconst useTokenBalance = token => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const basisCash = useBasisCash();\n  const fetchBalance = useCallback(async () => {\n    if (token.symbol === 'BNB') {\n      setBalance((await basisCash.provider.getBalance(basisCash.myAccount)));\n    } else {\n      setBalance((await token.balanceOf(basisCash.myAccount)));\n    }\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.isUnlocked, basisCash === null || basisCash === void 0 ? void 0 : basisCash.provider, token]);\n  useEffect(() => {\n    if (basisCash === null || basisCash === void 0 ? void 0 : basisCash.isUnlocked) {\n      fetchBalance().catch(err => console.error(`Failed to fetch token balance: ${err.stack}`));\n      let refreshInterval = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.isUnlocked, token]);\n  return balance;\n};\n\nexport default useTokenBalance;","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/hooks/useTokenBalance.ts"],"names":["useCallback","useEffect","useState","BigNumber","useBasisCash","config","useTokenBalance","token","balance","setBalance","from","basisCash","fetchBalance","symbol","provider","getBalance","myAccount","balanceOf","isUnlocked","catch","err","console","error","stack","refreshInterval","setInterval","clearInterval"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAkB;AACxC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAACC,SAAS,CAACO,IAAV,CAAe,CAAf,CAAD,CAAtC;AACA,QAAMC,SAAS,GAAGP,YAAY,EAA9B;AAEA,QAAMQ,YAAY,GAAGZ,WAAW,CAAC,YAAY;AAC3C,QAAIO,KAAK,CAACM,MAAN,KAAiB,KAArB,EAA4B;AAC1BJ,MAAAA,UAAU,EAAC,MAAME,SAAS,CAACG,QAAV,CAAmBC,UAAnB,CAA8BJ,SAAS,CAACK,SAAxC,CAAP,EAAV;AACD,KAFD,MAEO;AACLP,MAAAA,UAAU,EAAC,MAAMF,KAAK,CAACU,SAAN,CAAgBN,SAAS,CAACK,SAA1B,CAAP,EAAV;AACD;AACF,GAN+B,EAM7B,CAACL,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEO,UAAZ,EAAwBP,SAAxB,aAAwBA,SAAxB,uBAAwBA,SAAS,CAAEG,QAAnC,EAA6CP,KAA7C,CAN6B,CAAhC;AAQAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAEO,UAAf,EAA2B;AACzBN,MAAAA,YAAY,GAAGO,KAAf,CAAsBC,GAAD,IACnBC,OAAO,CAACC,KAAR,CAAe,kCAAiCF,GAAG,CAACG,KAAM,EAA1D,CADF;AAGA,UAAIC,eAAe,GAAGC,WAAW,CAACb,YAAD,EAAeP,MAAM,CAACmB,eAAtB,CAAjC;AACA,aAAO,MAAME,aAAa,CAACF,eAAD,CAA1B;AACD;AACF,GARQ,EAQN,CAACb,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEO,UAAZ,EAAwBX,KAAxB,CARM,CAAT;AAUA,SAAOC,OAAP;AACD,CAvBD;;AAyBA,eAAeF,eAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport ERC20 from '../basis-cash/ERC20';\nimport useBasisCash from './useBasisCash';\nimport config from '../config';\n\nconst useTokenBalance = (token: ERC20) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const basisCash = useBasisCash();\n\n  const fetchBalance = useCallback(async () => {\n    if (token.symbol === 'BNB') {\n      setBalance(await basisCash.provider.getBalance(basisCash.myAccount));\n    } else {\n      setBalance(await token.balanceOf(basisCash.myAccount));\n    }\n  }, [basisCash?.isUnlocked, basisCash?.provider, token]);\n\n  useEffect(() => {\n    if (basisCash?.isUnlocked) {\n      fetchBalance().catch((err) =>\n        console.error(`Failed to fetch token balance: ${err.stack}`),\n      );\n      let refreshInterval = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [basisCash?.isUnlocked, token]);\n\n  return balance;\n};\n\nexport default useTokenBalance;\n"]},"metadata":{},"sourceType":"module"}