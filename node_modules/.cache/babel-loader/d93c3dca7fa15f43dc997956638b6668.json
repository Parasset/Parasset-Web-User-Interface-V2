{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useBasisCash from './useBasisCash';\nimport config from '../config';\n\nconst useStakedBalance = poolName => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const basisCash = useBasisCash();\n  const fetchBalance = useCallback(async () => {\n    const balance = await basisCash.stakedBalanceOnBank(poolName, basisCash.myAccount);\n    setBalance(balance);\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.isUnlocked, poolName]);\n  useEffect(() => {\n    if (basisCash === null || basisCash === void 0 ? void 0 : basisCash.isUnlocked) {\n      fetchBalance().catch(err => console.error(err.stack));\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [basisCash === null || basisCash === void 0 ? void 0 : basisCash.isUnlocked, poolName, setBalance, basisCash]);\n  return balance;\n};\n\nexport default useStakedBalance;","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/hooks/useStakedBalance.ts"],"names":["useCallback","useEffect","useState","BigNumber","useBasisCash","config","useStakedBalance","poolName","balance","setBalance","from","basisCash","fetchBalance","stakedBalanceOnBank","myAccount","isUnlocked","catch","err","console","error","stack","refreshBalance","setInterval","refreshInterval","clearInterval"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,gBAAgB,GAAIC,QAAD,IAA4B;AACnD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAACC,SAAS,CAACO,IAAV,CAAe,CAAf,CAAD,CAAtC;AACA,QAAMC,SAAS,GAAGP,YAAY,EAA9B;AAEA,QAAMQ,YAAY,GAAGZ,WAAW,CAAC,YAAY;AAC3C,UAAMQ,OAAO,GAAG,MAAMG,SAAS,CAACE,mBAAV,CAA8BN,QAA9B,EAAwCI,SAAS,CAACG,SAAlD,CAAtB;AACAL,IAAAA,UAAU,CAACD,OAAD,CAAV;AACD,GAH+B,EAG7B,CAACG,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEI,UAAZ,EAAwBR,QAAxB,CAH6B,CAAhC;AAKAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAEI,UAAf,EAA2B;AACzBH,MAAAA,YAAY,GAAGI,KAAf,CAAqBC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,KAAlB,CAA5B;AAEA,YAAMC,cAAc,GAAGC,WAAW,CAACV,YAAD,EAAeP,MAAM,CAACkB,eAAtB,CAAlC;AACA,aAAO,MAAMC,aAAa,CAACH,cAAD,CAA1B;AACD;AACF,GAPQ,EAON,CAACV,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEI,UAAZ,EAAwBR,QAAxB,EAAkCE,UAAlC,EAA8CE,SAA9C,CAPM,CAAT;AASA,SAAOH,OAAP;AACD,CAnBD;;AAqBA,eAAeF,gBAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nimport { BigNumber } from 'ethers';\nimport useBasisCash from './useBasisCash';\nimport { ContractName } from '../basis-cash';\nimport config from '../config';\n\nconst useStakedBalance = (poolName: ContractName) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const basisCash = useBasisCash();\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await basisCash.stakedBalanceOnBank(poolName, basisCash.myAccount);\n    setBalance(balance);\n  }, [basisCash?.isUnlocked, poolName]);\n\n  useEffect(() => {\n    if (basisCash?.isUnlocked) {\n      fetchBalance().catch(err => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [basisCash?.isUnlocked, poolName, setBalance, basisCash]);\n\n  return balance;\n};\n\nexport default useStakedBalance;\n"]},"metadata":{},"sourceType":"module"}