{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport useBasisCash from './useBasisCash';\nimport config from '../config';\n\nconst useBondStats = () => {\n  const [stat, setStat] = useState();\n  const basisCash = useBasisCash();\n  const fetchBondPrice = useCallback(async () => {\n    setStat((await basisCash.getBondStat()));\n  }, [basisCash]);\n  useEffect(() => {\n    if (basisCash) {\n      fetchBondPrice().catch(err => console.error(`Failed to fetch GAB price: ${err.stack}`));\n      const refreshInterval = setInterval(fetchBondPrice, config.refreshInterval);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [setStat, basisCash]);\n  return stat;\n};\n\nexport default useBondStats;","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/hooks/useBondStats.ts"],"names":["useCallback","useEffect","useState","useBasisCash","config","useBondStats","stat","setStat","basisCash","fetchBondPrice","getBondStat","catch","err","console","error","stack","refreshInterval","setInterval","clearInterval"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,EAAhC;AACA,QAAMM,SAAS,GAAGL,YAAY,EAA9B;AAEA,QAAMM,cAAc,GAAGT,WAAW,CAAC,YAAY;AAC7CO,IAAAA,OAAO,EAAC,MAAMC,SAAS,CAACE,WAAV,EAAP,EAAP;AACD,GAFiC,EAE/B,CAACF,SAAD,CAF+B,CAAlC;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,SAAJ,EAAe;AACbC,MAAAA,cAAc,GAAGE,KAAjB,CAAwBC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAe,8BAA6BF,GAAG,CAACG,KAAM,EAAtD,CAAhC;AACA,YAAMC,eAAe,GAAGC,WAAW,CAACR,cAAD,EAAiBL,MAAM,CAACY,eAAxB,CAAnC;AACA,aAAO,MAAME,aAAa,CAACF,eAAD,CAA1B;AACD;AACF,GANQ,EAMN,CAACT,OAAD,EAAUC,SAAV,CANM,CAAT;AAQA,SAAOF,IAAP;AACD,CAjBD;;AAmBA,eAAeD,YAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport useBasisCash from './useBasisCash';\nimport { TokenStat } from '../basis-cash/types';\nimport config from '../config';\n\nconst useBondStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const basisCash = useBasisCash();\n\n  const fetchBondPrice = useCallback(async () => {\n    setStat(await basisCash.getBondStat());\n  }, [basisCash]);\n\n  useEffect(() => {\n    if (basisCash) {\n      fetchBondPrice().catch((err) => console.error(`Failed to fetch GAB price: ${err.stack}`));\n      const refreshInterval = setInterval(fetchBondPrice, config.refreshInterval);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [setStat, basisCash]);\n\n  return stat;\n};\n\nexport default useBondStats;\n"]},"metadata":{},"sourceType":"module"}