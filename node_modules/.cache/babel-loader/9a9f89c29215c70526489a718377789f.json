{"ast":null,"code":"var _jsxFileName = \"/Users/miczero/ParaAsset/src/contexts/Banks/Banks.tsx\";\n//@ts-nocheck\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport Context from \"./context\";\nimport useBasisCash from \"../../hooks/useBasisCash\";\nimport config, { bankDefinitions } from \"../../config\";\n\nconst Banks = ({\n  children\n}) => {\n  const [banks, setBanks] = useState([]);\n  const basisCash = useBasisCash();\n  const fetchPools = useCallback(async () => {\n    const banks = [];\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (!basisCash.isUnlocked) continue;\n      banks.push({ ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: basisCash.contracts[bankInfo.depositContract],\n        earnToken: basisCash.externalTokens[bankInfo.earnTokenName]\n      });\n    }\n\n    setBanks(banks);\n  }, [basisCash, basisCash === null || basisCash === void 0 ? void 0 : basisCash.isUnlocked, setBanks]);\n  useEffect(() => {\n    if (basisCash) {\n      fetchPools().catch(err => console.error(`Failed to fetch pools: ${err.stack}`));\n    }\n  }, [basisCash, basisCash === null || basisCash === void 0 ? void 0 : basisCash.isUnlocked, fetchPools]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      banks\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }, children);\n};\n\nexport default Banks;","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/contexts/Banks/Banks.tsx"],"names":["React","useCallback","useEffect","useState","Context","useBasisCash","config","bankDefinitions","Banks","children","banks","setBanks","basisCash","fetchPools","bankInfo","Object","values","isUnlocked","push","address","deployments","contract","depositToken","contracts","depositContract","earnToken","externalTokens","earnTokenName","catch","err","console","error","stack"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA,OAAOC,MAAP,IAAiBC,eAAjB,QAAwC,cAAxC;;AAEA,MAAMC,KAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACxC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAMS,SAAS,GAAGP,YAAY,EAA9B;AAEA,QAAMQ,UAAU,GAAGZ,WAAW,CAAC,YAAY;AACzC,UAAMS,KAAa,GAAG,EAAtB;;AAEA,SAAK,MAAMI,QAAX,IAAuBC,MAAM,CAACC,MAAP,CAAcT,eAAd,CAAvB,EAAuD;AACrD,UAAI,CAACK,SAAS,CAACK,UAAf,EAA2B;AAC3BP,MAAAA,KAAK,CAACQ,IAAN,CAAW,EACT,GAAGJ,QADM;AAETK,QAAAA,OAAO,EAAEb,MAAM,CAACc,WAAP,CAAmBN,QAAQ,CAACO,QAA5B,EAAsCF,OAFtC;AAGTG,QAAAA,YAAY,EAAEV,SAAS,CAACW,SAAV,CAAoBT,QAAQ,CAACU,eAA7B,CAHL;AAITC,QAAAA,SAAS,EAAEb,SAAS,CAACc,cAAV,CAAyBZ,QAAQ,CAACa,aAAlC;AAJF,OAAX;AAMD;;AACDhB,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GAb6B,EAa3B,CAACE,SAAD,EAAYA,SAAZ,aAAYA,SAAZ,uBAAYA,SAAS,CAAEK,UAAvB,EAAmCN,QAAnC,CAb2B,CAA9B;AAeAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,SAAJ,EAAe;AACbC,MAAAA,UAAU,GAAGe,KAAb,CAAoBC,GAAD,IACjBC,OAAO,CAACC,KAAR,CAAe,0BAAyBF,GAAG,CAACG,KAAM,EAAlD,CADF;AAGD;AACF,GANQ,EAMN,CAACpB,SAAD,EAAYA,SAAZ,aAAYA,SAAZ,uBAAYA,SAAS,CAAEK,UAAvB,EAAmCJ,UAAnC,CANM,CAAT;AAQA,sBAAO,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAAEH,MAAAA;AAAF,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCD,QAArC,CAAP;AACD,CA5BD;;AA8BA,eAAeD,KAAf","sourcesContent":["//@ts-nocheck\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport Context from \"./context\";\nimport useBasisCash from \"../../hooks/useBasisCash\";\nimport { Bank } from \"../../basis-cash\";\nimport config, { bankDefinitions } from \"../../config\";\n\nconst Banks: React.FC = ({ children }) => {\n  const [banks, setBanks] = useState<Bank[]>([]);\n  const basisCash = useBasisCash();\n\n  const fetchPools = useCallback(async () => {\n    const banks: Bank[] = [];\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (!basisCash.isUnlocked) continue;\n      banks.push({\n        ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: basisCash.contracts[bankInfo.depositContract],\n        earnToken: basisCash.externalTokens[bankInfo.earnTokenName],\n      });\n    }\n    setBanks(banks);\n  }, [basisCash, basisCash?.isUnlocked, setBanks]);\n\n  useEffect(() => {\n    if (basisCash) {\n      fetchPools().catch((err) =>\n        console.error(`Failed to fetch pools: ${err.stack}`)\n      );\n    }\n  }, [basisCash, basisCash?.isUnlocked, fetchPools]);\n\n  return <Context.Provider value={{ banks }}>{children}</Context.Provider>;\n};\n\nexport default Banks;\n"]},"metadata":{},"sourceType":"module"}