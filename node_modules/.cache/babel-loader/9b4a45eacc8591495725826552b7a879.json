{"ast":null,"code":"//@ts-nocheck\nimport { Contract, ethers } from \"ethers\";\nimport { getTonumber } from '../utils/formatBalance';\nimport { getDefaultProvider } from \"../utils/provider\";\n/**\n * An API module of Gaea Coin contracts.\n * All contract-interacting domain logic should be defined in here.\n */\n\nexport class BasisCash {\n  constructor(cfg) {\n    this.myAccount = void 0;\n    this.provider = void 0;\n    this.signer = void 0;\n    this.config = void 0;\n    this.contracts = void 0;\n    this.externalTokens = void 0;\n    this.boardroomVersionOfUser = void 0;\n    const {\n      deployments,\n      externalTokens\n    } = cfg;\n    const provider = getDefaultProvider(); // loads contracts from deployments\n\n    this.contracts = {};\n\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n\n    this.externalTokens = {};\n\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal); // TODO: add decimal\n    }\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n\n\n  unlockWallet(provider, account) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n\n    const tokens = [...Object.values(this.externalTokens)];\n\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n  }\n\n  get isUnlocked() {\n    return !!this.myAccount;\n  }\n\n  gasOptions() {\n    return {\n      // gasLimit: 300000000,\n      from: this.myAccount\n    };\n  }\n\n  async getStaked(depositToken, account = this.myAccount) {\n    try {\n      const {\n        Mine\n      } = this.contracts;\n      const {\n        address\n      } = depositToken;\n      let staked = await Mine.getBalance(address, account);\n      return staked;\n    } catch (error) {\n      return \"0\";\n    }\n  }\n\n  async getEarned(depositToken, account = this.myAccount) {\n    try {\n      const {\n        Mine\n      } = this.contracts;\n      const {\n        address\n      } = depositToken;\n      let earned = await Mine.getAccountReward(address, account);\n      return getTonumber(earned);\n    } catch (error) {\n      return \"0\";\n    }\n  }\n\n  async stake(amount, poolName, pid) {\n    try {\n      const pool = this.contracts[poolName];\n      return await pool.deposit(pid, amount, this.gasOptions());\n    } catch (error) {\n      console.log(\"ðŸš€ ~ file: BasisCash.ts ~ line 126 ~ BasisCash ~ stake ~ error\", error, amount, poolName, pid);\n    }\n  }\n\n  async unstake(amount, poolName, pid) {\n    const pool = this.contracts[poolName];\n    console.log(\"ðŸš€ ~ file: BasisCash.ts ~ line 91 ~ BasisCash ~ unstake ~ amount\", amount);\n    return await pool.withdraw(pid, amount, this.gasOptions());\n  }\n\n  async harvest(poolName, pid) {\n    const pool = this.contracts[poolName];\n    return await pool.deposit(pid, 0, this.gasOptions());\n  }\n\n}","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/basis-cash/BasisCash.ts"],"names":["Contract","ethers","getTonumber","getDefaultProvider","BasisCash","constructor","cfg","myAccount","provider","signer","config","contracts","externalTokens","boardroomVersionOfUser","deployments","name","deployment","Object","entries","address","abi","symbol","decimal","ERC20","unlockWallet","account","newProvider","providers","Web3Provider","chainId","getSigner","contract","connect","tokens","values","token","isUnlocked","gasOptions","from","getStaked","depositToken","Mine","staked","getBalance","error","getEarned","earned","getAccountReward","stake","amount","poolName","pid","pool","deposit","console","log","unstake","withdraw","harvest"],"mappings":"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","sourcesContent":["//@ts-nocheck\n\nimport { Configuration } from \"./config\";\nimport {  Contract, ethers, Overrides } from \"ethers\";\nimport { getDisplayNumber, getToBignumber, getTonumber } from '../utils/formatBalance'\nimport { getDefaultProvider } from \"../utils/provider\";\n\n/**\n * An API module of Gaea Coin contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class BasisCash {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  boardroomVersionOfUser?: string;\n \n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n\n    // loads contracts from deployments\n    this.contracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(\n        deployment.address,\n        deployment.abi,\n        provider\n      );\n    }\n    this.externalTokens = {};\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(\n        address,\n        provider,\n        symbol,\n        decimal\n      ); // TODO: add decimal\n    }\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(\n      provider,\n      this.config.chainId\n    );\n\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [...Object.values(this.externalTokens)];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  gasOptions() {\n    return {\n      // gasLimit: 300000000,\n      from: this.myAccount,\n    };\n  }\n\n  async getStaked(depositToken, account = this.myAccount) {\n    try {\n      const { Mine } = this.contracts;\n      const { address } = depositToken;\n      let staked = await Mine.getBalance(address, account);\n      return staked;\n    } catch (error) {\n      return \"0\";\n    }\n  }\n  async getEarned(depositToken, account = this.myAccount) {\n    try {\n      const { Mine } = this.contracts;\n      const { address } = depositToken;\n      let earned = await Mine.getAccountReward(address, account);\n      return getTonumber(earned);\n    } catch (error) {\n      return \"0\";\n    }\n  }\n\n  async stake(amount, poolName, pid) {\n    try {\n      const pool = this.contracts[poolName];\n      return await pool.deposit(pid, amount, this.gasOptions());\n    } catch (error) {\n      console.log(\n        \"ðŸš€ ~ file: BasisCash.ts ~ line 126 ~ BasisCash ~ stake ~ error\",\n        error,\n        amount,\n        poolName,\n        pid\n      );\n    }\n  }\n\n  async unstake(amount, poolName, pid) {\n    const pool = this.contracts[poolName];\n    console.log(\n      \"ðŸš€ ~ file: BasisCash.ts ~ line 91 ~ BasisCash ~ unstake ~ amount\",\n      amount\n    );\n    return await pool.withdraw(pid, amount, this.gasOptions());\n  }\n\n  async harvest(poolName, pid) {\n    const pool = this.contracts[poolName];\n    return await pool.deposit(pid, 0, this.gasOptions());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}