{"ast":null,"code":"var _jsxFileName = \"/Users/miczero/ParaAsset/src/contexts/BasisCashProvider/BasisCashProvider.tsx\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport BasisCash from '../../basis-cash';\nimport config from '../../config';\nexport const Context = createContext({\n  basisCash: null\n});\nexport const BasisCashProvider = ({\n  children\n}) => {\n  const {\n    ethereum,\n    account\n  } = useWallet();\n  const [basisCash, setBasisCash] = useState();\n  useEffect(() => {\n    if (!basisCash) {\n      const basis = new BasisCash(config);\n\n      if (account) {\n        // wallet was unlocked at initialization\n        basis.unlockWallet(ethereum, account);\n      }\n\n      setBasisCash(basis);\n    } else if (account) {\n      basisCash.unlockWallet(ethereum, account);\n    }\n  }, [account]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      basisCash\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/contexts/BasisCashProvider/BasisCashProvider.tsx"],"names":["React","createContext","useEffect","useState","useWallet","BasisCash","config","Context","basisCash","BasisCashProvider","children","ethereum","account","setBasisCash","basis","unlockWallet"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAMA,OAAO,MAAMC,OAAO,GAAGN,aAAa,CAAmB;AAAEO,EAAAA,SAAS,EAAE;AAAb,CAAnB,CAA7B;AAEP,OAAO,MAAMC,iBAA2B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3D,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBR,SAAS,EAAvC;AACA,QAAM,CAACI,SAAD,EAAYK,YAAZ,IAA4BV,QAAQ,EAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACM,SAAL,EAAgB;AACd,YAAMM,KAAK,GAAG,IAAIT,SAAJ,CAAcC,MAAd,CAAd;;AACA,UAAIM,OAAJ,EAAa;AACX;AACAE,QAAAA,KAAK,CAACC,YAAN,CAAmBJ,QAAnB,EAA6BC,OAA7B;AACD;;AACDC,MAAAA,YAAY,CAACC,KAAD,CAAZ;AACD,KAPD,MAOO,IAAIF,OAAJ,EAAa;AAClBJ,MAAAA,SAAS,CAACO,YAAV,CAAuBJ,QAAvB,EAAiCC,OAAjC;AACD;AACF,GAXQ,EAWN,CAACA,OAAD,CAXM,CAAT;AAaA,sBAAO,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAAEJ,MAAAA;AAAF,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyCE,QAAzC,CAAP;AACD,CAlBM","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport BasisCash from '../../basis-cash';\nimport config from '../../config';\n\nexport interface BasisCashContext {\n  basisCash?: BasisCash;\n}\n\nexport const Context = createContext<BasisCashContext>({ basisCash: null });\n\nexport const BasisCashProvider: React.FC = ({ children }) => {\n  const { ethereum, account } = useWallet();\n  const [basisCash, setBasisCash] = useState<BasisCash>();\n\n  useEffect(() => {\n    if (!basisCash) {\n      const basis = new BasisCash(config);\n      if (account) {\n        // wallet was unlocked at initialization\n        basis.unlockWallet(ethereum, account);\n      }\n      setBasisCash(basis);\n    } else if (account) {\n      basisCash.unlockWallet(ethereum, account);\n    }\n  }, [account]);\n\n  return <Context.Provider value={{ basisCash }}>{children}</Context.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}