{"ast":null,"code":"//@ts-nocheck\nimport { BigNumber, Contract, ethers } from \"ethers\";\nimport ERC20 from \"./ERC20\";\nimport { getDefaultProvider } from \"../utils/provider\";\n\n/**\n * An API module of Gaea Coin contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class BasisCash {\n  constructor(cfg) {\n    this.myAccount = void 0;\n    this.provider = void 0;\n    this.signer = void 0;\n    this.config = void 0;\n    this.contracts = void 0;\n    this.externalTokens = void 0;\n    this.boardroomVersionOfUser = void 0;\n    this.GAC = void 0;\n    this.GAS = void 0;\n    this.GAB = void 0;\n    const {\n      deployments,\n      externalTokens\n    } = cfg;\n    const provider = getDefaultProvider(); // loads contracts from deployments\n\n    this.contracts = {};\n\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n\n    this.externalTokens = {};\n\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal); // TODO: add decimal\n    }\n\n    this.GAC = new ERC20(deployments.Cash.address, provider, \"GAC\");\n    this.GAS = new ERC20(deployments.Share.address, provider, \"GAS\");\n    this.GAB = new ERC20(deployments.Bond.address, provider, \"GAB\");\n    this.config = cfg;\n    this.provider = provider;\n  }\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n\n\n  unlockWallet(provider, account) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n\n    const tokens = [this.GAC, this.GAS, this.GAB, ...Object.values(this.externalTokens)];\n\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n\n    this.fetchBoardroomVersionOfUser().then(version => this.boardroomVersionOfUser = version).catch(err => {\n      console.error(`Failed to fetch boardroom version: ${err.stack}`);\n      this.boardroomVersionOfUser = \"latest\";\n    });\n  }\n\n  get isUnlocked() {\n    return !!this.myAccount;\n  }\n\n  gasOptions(gas) {\n    const multiplied = Math.floor(gas.toNumber() * this.config.gasLimitMultiplier);\n    console.log(`⛽️ Gas multiplied: ${gas} -> ${multiplied}`);\n    return {\n      gasLimit: BigNumber.from(multiplied)\n    };\n  }\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n\n\n  async stake(poolName, amount, bank) {\n    const pool = this.contracts[poolName];\n    var gasObj = {\n      gasLimit: 2300000\n    };\n    var parm = gasObj;\n    return await pool.stake(amount, parm);\n  }\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n\n\n  async unstake(poolName, amount) {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.withdraw(amount);\n    return await pool.withdraw(amount, this.gasOptions(gas));\n  }\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n\n\n  async harvest(poolName) {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.getReward();\n    return await pool.getReward(this.gasOptions(gas));\n  }\n\n}","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/basis-cash/BasisCash.ts"],"names":["BigNumber","Contract","ethers","ERC20","getDefaultProvider","BasisCash","constructor","cfg","myAccount","provider","signer","config","contracts","externalTokens","boardroomVersionOfUser","GAC","GAS","GAB","deployments","name","deployment","Object","entries","address","abi","symbol","decimal","Cash","Share","Bond","unlockWallet","account","newProvider","providers","Web3Provider","chainId","getSigner","contract","connect","tokens","values","token","fetchBoardroomVersionOfUser","then","version","catch","err","console","error","stack","isUnlocked","gasOptions","gas","multiplied","Math","floor","toNumber","gasLimitMultiplier","log","gasLimit","from","stake","poolName","amount","bank","pool","gasObj","parm","unstake","estimateGas","withdraw","harvest","getReward"],"mappings":"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","sourcesContent":["//@ts-nocheck\nimport { Fetcher, Route, Token } from \"@uniswap/sdk\";\nimport { Configuration } from \"./config\";\nimport { ContractName, TokenStat, TreasuryAllocationTime } from \"./types\";\nimport { BigNumber, Contract, ethers, Overrides } from \"ethers\";\nimport { decimalToBalance } from \"./ether-utils\";\nimport { TransactionResponse } from \"@ethersproject/providers\";\nimport ERC20 from \"./ERC20\";\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport { getDefaultProvider } from \"../utils/provider\";\nimport IUniswapV2PairABI from \"./IUniswapV2Pair.abi.json\";\n\n/**\n * An API module of Gaea Coin contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class BasisCash {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  boardroomVersionOfUser?: string;\n  GAC: ERC20;\n  GAS: ERC20;\n  GAB: ERC20;\n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n\n    // loads contracts from deployments\n    this.contracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(\n        deployment.address,\n        deployment.abi,\n        provider\n      );\n    }\n    this.externalTokens = {};\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(\n        address,\n        provider,\n        symbol,\n        decimal\n      ); // TODO: add decimal\n    }\n\n    this.GAC = new ERC20(deployments.Cash.address, provider, \"GAC\");\n    this.GAS = new ERC20(deployments.Share.address, provider, \"GAS\");\n    this.GAB = new ERC20(deployments.Bond.address, provider, \"GAB\");\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(\n      provider,\n      this.config.chainId\n    );\n\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [\n      this.GAC,\n      this.GAS,\n      this.GAB,\n      ...Object.values(this.externalTokens),\n    ];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n\n    this.fetchBoardroomVersionOfUser()\n      .then((version) => (this.boardroomVersionOfUser = version))\n      .catch((err) => {\n        console.error(`Failed to fetch boardroom version: ${err.stack}`);\n        this.boardroomVersionOfUser = \"latest\";\n      });\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  gasOptions(gas: BigNumber): Overrides {\n    const multiplied = Math.floor(\n      gas.toNumber() * this.config.gasLimitMultiplier\n    );\n    console.log(`⛽️ Gas multiplied: ${gas} -> ${multiplied}`);\n    return {\n      gasLimit: BigNumber.from(multiplied),\n    };\n  }\n\n\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(\n    poolName: ContractName,\n    amount: BigNumber,\n    bank: any\n  ): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    var gasObj = {\n      gasLimit: 2300000,\n    };\n    var parm = gasObj;\n    return await pool.stake(amount, parm);\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(\n    poolName: ContractName,\n    amount: BigNumber\n  ): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.withdraw(amount);\n    return await pool.withdraw(amount, this.gasOptions(gas));\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.getReward();\n    return await pool.getReward(this.gasOptions(gas));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}