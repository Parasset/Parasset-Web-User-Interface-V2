{"ast":null,"code":"//@ts-nocheck\nimport { Contract, ethers } from \"ethers\";\nimport ERC20 from \"./ERC20\";\nimport { getDefaultProvider } from \"../utils/provider\";\n/**\n * An API module of Gaea Coin contracts.\n * All contract-interacting domain logic should be defined in here.\n */\n\nexport class BasisCash {\n  constructor(cfg) {\n    this.myAccount = void 0;\n    this.provider = void 0;\n    this.signer = void 0;\n    this.config = void 0;\n    this.contracts = void 0;\n    this.externalTokens = void 0;\n    this.boardroomVersionOfUser = void 0;\n    this.GAC = void 0;\n    this.GAS = void 0;\n    this.GAB = void 0;\n    const {\n      deployments,\n      externalTokens\n    } = cfg;\n    const provider = getDefaultProvider(); // loads contracts from deployments\n\n    this.contracts = {};\n\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n\n    this.externalTokens = {};\n\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal); // TODO: add decimal\n    }\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n\n\n  unlockWallet(provider, account) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n\n    const tokens = [...Object.values(this.externalTokens)];\n\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n  }\n\n  get isUnlocked() {\n    return !!this.myAccount;\n  }\n\n  gasOptions() {\n    return {\n      // gasLimit: 300000000,\n      from: this.myAccount\n    };\n  }\n\n  async getStaked(address) {\n    try {\n      const {\n        Mine\n      } = this.contracts;\n      let earned = await Mine.getBalance(pid, account);\n      return getTonumber(earned);\n    } catch (error) {\n      return '0';\n    }\n  }\n\n  async stake(poolName, amount, mine) {\n    const pool = this.contracts[poolName];\n    var gasObj = {\n      gasLimit: 2300000\n    };\n    var parm = gasObj;\n    return await pool.stake(amount, parm);\n  }\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n\n\n  async stake(poolName, amount, mine) {\n    const pool = this.contracts[poolName];\n    var gasObj = {\n      gasLimit: 2300000\n    };\n    var parm = gasObj;\n    return await pool.stake(amount, parm);\n  }\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n\n\n  async unstake(poolName, amount) {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.withdraw(amount);\n    return await pool.withdraw(amount, this.gasOptions(gas));\n  }\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n\n\n  async harvest(poolName) {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.getReward();\n    return await pool.getReward(this.gasOptions(gas));\n  }\n\n}","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/basis-cash/BasisCash.ts"],"names":["Contract","ethers","ERC20","getDefaultProvider","BasisCash","constructor","cfg","myAccount","provider","signer","config","contracts","externalTokens","boardroomVersionOfUser","GAC","GAS","GAB","deployments","name","deployment","Object","entries","address","abi","symbol","decimal","unlockWallet","account","newProvider","providers","Web3Provider","chainId","getSigner","contract","connect","tokens","values","token","isUnlocked","gasOptions","from","getStaked","Mine","earned","getBalance","pid","getTonumber","error","stake","poolName","amount","mine","pool","gasObj","gasLimit","parm","unstake","gas","estimateGas","withdraw","harvest","getReward"],"mappings":"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","sourcesContent":["import { Mine } from './types';\n//@ts-nocheck\nimport { Configuration } from \"./config\";\nimport { ContractName,  } from \"./types\";\nimport { BigNumber, Contract, ethers, Overrides } from \"ethers\";\nimport { TransactionResponse } from \"@ethersproject/providers\";\nimport ERC20 from \"./ERC20\";\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport { getDefaultProvider } from \"../utils/provider\";\n\n\n/**\n * An API module of Gaea Coin contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class BasisCash {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  boardroomVersionOfUser?: string;\n  GAC: ERC20;\n  GAS: ERC20;\n  GAB: ERC20;\n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n\n    // loads contracts from deployments\n    this.contracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(\n        deployment.address,\n        deployment.abi,\n        provider\n      );\n    }\n    this.externalTokens = {};\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(\n        address,\n        provider,\n        symbol,\n        decimal\n      ); // TODO: add decimal\n    }\n\n    \n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(\n      provider,\n      this.config.chainId\n    );\n\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [\n      ...Object.values(this.externalTokens),\n    ];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  gasOptions() {\n    return {\n      // gasLimit: 300000000,\n      from: this.myAccount\n    }\n  }\n\n\n  async getStaked(address) {\n    try {\n      const {Mine} = this.contracts\n      let earned = await Mine.getBalance(pid, account)\n\n      return getTonumber(earned)\n    } catch (error) {\n      return '0'\n    }\n  }\n\n  async stake(\n    poolName: ContractName,\n    amount: BigNumber,\n    mine: any\n  ): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    var gasObj = {\n      gasLimit: 2300000,\n    };\n    var parm = gasObj;\n    return await pool.stake(amount, parm);\n  }\n\n\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(\n    poolName: ContractName,\n    amount: BigNumber,\n    mine: any\n  ): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    var gasObj = {\n      gasLimit: 2300000,\n    };\n    var parm = gasObj;\n    return await pool.stake(amount, parm);\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(\n    poolName: ContractName,\n    amount: BigNumber\n  ): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.withdraw(amount);\n    return await pool.withdraw(amount, this.gasOptions(gas));\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    const gas = await pool.estimateGas.getReward();\n    return await pool.getReward(this.gasOptions(gas));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}