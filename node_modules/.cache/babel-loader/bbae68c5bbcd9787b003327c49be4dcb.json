{"ast":null,"code":"var _jsxFileName = \"/Users/miczero/ParaAsset/src/components/TopBar/components/TxModal.tsx\";\nimport React, { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Modal from '../../Modal';\nimport Label from '../../Label';\nimport Button from '../../Button';\nimport styled from 'styled-components';\nimport Transaction from './Transaction';\nimport ModalActions from '../../ModalActions';\nimport Spacer from '../../Spacer';\nimport { isTransactionRecent, useAllTransactions, useClearAllTransactions } from '../../../state/transactions/hooks';\nimport { Trash } from 'react-feather';\nconst MAX_TRANSACTION_HISTORY = 10;\n\nconst TxModal = ({\n  isOpen,\n  onDismiss\n}) => {\n  const allTransactions = useAllTransactions();\n  const {\n    clearAllTransactions\n  } = useClearAllTransactions();\n  const {\n    t\n  } = useTranslation();\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions);\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst);\n  }, [allTransactions]);\n  const pending = sortedRecentTransactions.filter(tx => !tx.receipt);\n  const confirmed = sortedRecentTransactions.filter(tx => tx.receipt).slice(0, MAX_TRANSACTION_HISTORY);\n  const isEmpty = (confirmed === null || confirmed === void 0 ? void 0 : confirmed.length) + (pending === null || pending === void 0 ? void 0 : pending.length) == 0;\n  return /*#__PURE__*/React.createElement(StyledModal, {\n    isOpen: isOpen,\n    onDismiss: onDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(StyledTitleArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StyledModalTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, t('jiaoyi1')), (confirmed === null || confirmed === void 0 ? void 0 : confirmed.length) > 0 && /*#__PURE__*/React.createElement(StyledClearIconWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Trash, {\n    onClick: clearAllTransactions,\n    size: \"16\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }))), (pending === null || pending === void 0 ? void 0 : pending.length) > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Label, {\n    text: t('dcljy'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(StyledTransactionList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, pending.map(tx => /*#__PURE__*/React.createElement(Transaction, {\n    key: tx.hash,\n    tx: tx,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 32\n    }\n  }))), /*#__PURE__*/React.createElement(Spacer, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  })), (confirmed === null || confirmed === void 0 ? void 0 : confirmed.length) > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Label, {\n    text: \"Recent transactions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(StyledTransactionList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, confirmed.map(tx => /*#__PURE__*/React.createElement(Transaction, {\n    key: tx.hash,\n    tx: tx,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 34\n    }\n  })))), isEmpty && /*#__PURE__*/React.createElement(Label, {\n    text: t('myjy'),\n    color: \"#777\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ModalActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    text: t('guanbi'),\n    onClick: onDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst StyledModal = styled(Modal)`\n  width: 360px;\n`;\nconst StyledTitleArea = styled.div`\n  display: flex;\n  align-items: center;\n  height: ${props => props.theme.topBarSize}px;\n  margin-top: ${props => -props.theme.spacing[4]}px;\n`;\nconst StyledModalTitle = styled.div`\n  color: ${props => props.theme.color.grey[300]};\n  flex: 1;\n  font-size: 18px;\n  \n`;\nconst StyledClearIconWrapper = styled.div`\n  color: ${({\n  theme\n}) => theme.color.grey[300]};\n`;\nconst StyledTransactionList = styled.div`\n  display: flex;\n  flex-direction: column;\n`; // we want the latest one to come first, so return negative if a is after b\n\nfunction newTransactionsFirst(a, b) {\n  return b.addedTime - a.addedTime;\n}\n\nexport default TxModal;","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/components/TopBar/components/TxModal.tsx"],"names":["React","useMemo","useTranslation","Modal","Label","Button","styled","Transaction","ModalActions","Spacer","isTransactionRecent","useAllTransactions","useClearAllTransactions","Trash","MAX_TRANSACTION_HISTORY","TxModal","isOpen","onDismiss","allTransactions","clearAllTransactions","t","sortedRecentTransactions","txs","Object","values","filter","sort","newTransactionsFirst","pending","tx","receipt","confirmed","slice","isEmpty","length","map","hash","StyledModal","StyledTitleArea","div","props","theme","topBarSize","spacing","StyledModalTitle","color","grey","StyledClearIconWrapper","StyledTransactionList","a","b","addedTime"],"mappings":"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","sourcesContent":["\nimport React, { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next'\nimport Modal, { ModalProps } from '../../Modal';\nimport Label from '../../Label';\nimport Button from '../../Button';\nimport { TransactionDetails } from '../../../state/transactions/reducer';\nimport styled from 'styled-components';\nimport Transaction from './Transaction';\nimport ModalActions from '../../ModalActions';\nimport Spacer from '../../Spacer';\nimport { isTransactionRecent, useAllTransactions, useClearAllTransactions } from '../../../state/transactions/hooks';\nimport { Trash } from 'react-feather';\nconst MAX_TRANSACTION_HISTORY = 10;\n\nconst TxModal: React.FC<ModalProps> = ({ isOpen,onDismiss }) => {\n  const allTransactions = useAllTransactions();\n  const { clearAllTransactions } = useClearAllTransactions();\n   const { t } = useTranslation()\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions);\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst);\n  }, [allTransactions]);\n\n  const pending = sortedRecentTransactions.filter((tx) => !tx.receipt);\n  const confirmed = sortedRecentTransactions\n    .filter((tx) => tx.receipt)\n    .slice(0, MAX_TRANSACTION_HISTORY);\n\n  const isEmpty = (confirmed?.length + pending?.length) == 0;\n  return (\n    <StyledModal isOpen={isOpen} onDismiss={onDismiss}>\n      <StyledTitleArea>\n        <StyledModalTitle>{t('jiaoyi1')}</StyledModalTitle>\n        {confirmed?.length > 0 && (\n          <StyledClearIconWrapper>\n            <Trash onClick={clearAllTransactions} size=\"16\" />\n          </StyledClearIconWrapper>\n        )}\n      </StyledTitleArea>\n      {pending?.length > 0 && (\n        <>\n          <Label text={t('dcljy')} />\n          <StyledTransactionList>\n            {pending.map(tx => <Transaction key={tx.hash} tx={tx} />)}\n          </StyledTransactionList>\n          <Spacer size=\"sm\" />\n        </>\n      )}\n      {confirmed?.length > 0 && (\n        <>\n          <Label text=\"Recent transactions\" />\n          <StyledTransactionList>\n            {confirmed.map(tx => <Transaction key={tx.hash} tx={tx} />)}\n          </StyledTransactionList>\n        </>\n      )}\n      {isEmpty && (\n        <Label text={t('myjy')} color=\"#777\" />\n      )}\n      <ModalActions>\n        <Button text={t('guanbi')} onClick={onDismiss} />\n      </ModalActions>\n    </StyledModal>\n  )\n}\n\nconst StyledModal = styled(Modal)`\n  width: 360px;\n`;\n\nconst StyledTitleArea = styled.div`\n  display: flex;\n  align-items: center;\n  height: ${props => props.theme.topBarSize}px;\n  margin-top: ${props => -props.theme.spacing[4]}px;\n`;\n\nconst StyledModalTitle = styled.div`\n  color: ${props => props.theme.color.grey[300]};\n  flex: 1;\n  font-size: 18px;\n  \n`;\n\nconst StyledClearIconWrapper = styled.div`\n  color: ${({ theme }) => theme.color.grey[300]};\n`;\n\nconst StyledTransactionList = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime;\n}\n\nexport default TxModal;"]},"metadata":{},"sourceType":"module"}