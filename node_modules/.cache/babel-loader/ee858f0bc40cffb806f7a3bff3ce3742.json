{"ast":null,"code":"//@ts-nocheck\nimport { ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport useAllowance from './useAllowance';\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256; // returns a variable indicating the state of the approval and a function which approves if necessary or early returns\n\nfunction useApprove(token, spender) {\n  const currentAllowance = useAllowance(token, spender);\n  const handleTransactionReceipt = useHandleTransactionReceipt(); // check the current approval status\n\n  const approvalState = useMemo(() => {\n    return !currentAllowance;\n  }, [currentAllowance]);\n  const approve = useCallback(async () => {\n    if (!approvalState) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    try {\n      console.log('object');\n      return handleTransactionReceipt(token.approve, [spender, APPROVE_AMOUNT], token);\n    } catch (error) {\n      return '0';\n    }\n  }, [approvalState, token, spender]);\n  return [approvalState, approve];\n}\n\nexport default useApprove;","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/hooks/useApprove.ts"],"names":["ethers","useCallback","useMemo","useHandleTransactionReceipt","useAllowance","APPROVE_AMOUNT","constants","MaxUint256","useApprove","token","spender","currentAllowance","handleTransactionReceipt","approvalState","approve","console","error","log"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,OAAOC,2BAAP,MAAwC,+BAAxC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,cAAc,GAAGL,MAAM,CAACM,SAAP,CAAiBC,UAAxC,C,CAEA;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAAgCC,OAAhC,EAAiD;AAC/C,QAAMC,gBAAgB,GAAGP,YAAY,CAACK,KAAD,EAAQC,OAAR,CAArC;AACA,QAAME,wBAAwB,GAAGT,2BAA2B,EAA5D,CAF+C,CAG/C;;AACA,QAAMU,aAAa,GAAGX,OAAO,CAAC,MAAM;AAClC,WAAO,CAACS,gBAAR;AACD,GAF4B,EAE1B,CAACA,gBAAD,CAF0B,CAA7B;AAIA,QAAMG,OAAO,GAAGb,WAAW,CAAC,YAAY;AACtC,QAAI,CAACY,aAAL,EAAoB;AAClBE,MAAAA,OAAO,CAACC,KAAR,CAAc,kCAAd;AACA;AACD;;AACD,QAAI;AACFD,MAAAA,OAAO,CAACE,GAAR,CAAY,QAAZ;AACA,aAAOL,wBAAwB,CAACH,KAAK,CAACK,OAAP,EAAgB,CAACJ,OAAD,EAAUL,cAAV,CAAhB,EAA2CI,KAA3C,CAA/B;AACD,KAHD,CAGE,OAAOO,KAAP,EAAc;AACd,aAAO,GAAP;AACD;AACF,GAX0B,EAWxB,CAACH,aAAD,EAAgBJ,KAAhB,EAAuBC,OAAvB,CAXwB,CAA3B;AAaA,SAAO,CAACG,aAAD,EAAgBC,OAAhB,CAAP;AACD;;AAED,eAAeN,UAAf","sourcesContent":["//@ts-nocheck\nimport { ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport useAllowance from './useAllowance';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApprove(token: any, spender: string) {\n  const currentAllowance = useAllowance(token, spender);\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n  // check the current approval status\n  const approvalState = useMemo(() => {\n    return !currentAllowance;\n  }, [currentAllowance]);\n\n  const approve = useCallback(async () => {\n    if (!approvalState) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n    try {\n      console.log('object')\n      return handleTransactionReceipt(token.approve, [spender, APPROVE_AMOUNT], token);\n    } catch (error) {\n      return '0';\n    }\n  }, [approvalState, token, spender]);\n\n  return [approvalState, approve];\n}\n\nexport default useApprove;\n"]},"metadata":{},"sourceType":"module"}