{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport useBasisCash from './useBasisCash';\nimport config from '../config';\nimport { BigNumber } from 'ethers';\n\nconst useBondOraclePriceInLastTWAP = () => {\n  const [price, setPrice] = useState(BigNumber.from(0));\n  const basisCash = useBasisCash();\n  const fetchCashPrice = useCallback(async () => {\n    setPrice((await basisCash.getBondOraclePriceInLastTWAP()));\n  }, [basisCash]);\n  useEffect(() => {\n    if (basisCash) {\n      fetchCashPrice().catch(err => console.error(`Failed to fetch GAB price: ${err.stack}`));\n      const refreshInterval = setInterval(fetchCashPrice, config.refreshInterval);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [setPrice, basisCash]);\n  return price;\n};\n\nexport default useBondOraclePriceInLastTWAP;","map":{"version":3,"sources":["/Users/miczero/ParaAsset/src/hooks/useBondOraclePriceInLastTWAP.ts"],"names":["useCallback","useEffect","useState","useBasisCash","config","BigNumber","useBondOraclePriceInLastTWAP","price","setPrice","from","basisCash","fetchCashPrice","getBondOraclePriceInLastTWAP","catch","err","console","error","stack","refreshInterval","setInterval","clearInterval"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,SAAT,QAA0B,QAA1B;;AAEA,MAAMC,4BAA4B,GAAG,MAAM;AACzC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAYG,SAAS,CAACI,IAAV,CAAe,CAAf,CAAZ,CAAlC;AACA,QAAMC,SAAS,GAAGP,YAAY,EAA9B;AAEA,QAAMQ,cAAc,GAAGX,WAAW,CAAC,YAAY;AAC7CQ,IAAAA,QAAQ,EAAC,MAAME,SAAS,CAACE,4BAAV,EAAP,EAAR;AACD,GAFiC,EAE/B,CAACF,SAAD,CAF+B,CAAlC;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,SAAJ,EAAe;AACbC,MAAAA,cAAc,GAAGE,KAAjB,CAAwBC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAe,8BAA6BF,GAAG,CAACG,KAAM,EAAtD,CAAhC;AACA,YAAMC,eAAe,GAAGC,WAAW,CAACR,cAAD,EAAiBP,MAAM,CAACc,eAAxB,CAAnC;AACA,aAAO,MAAME,aAAa,CAACF,eAAD,CAA1B;AACD;AACF,GANQ,EAMN,CAACV,QAAD,EAAWE,SAAX,CANM,CAAT;AAQA,SAAOH,KAAP;AACD,CAjBD;;AAmBA,eAAeD,4BAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport useBasisCash from './useBasisCash';\nimport config from '../config';\nimport { BigNumber } from 'ethers';\n\nconst useBondOraclePriceInLastTWAP = () => {\n  const [price, setPrice] = useState<BigNumber>(BigNumber.from(0));\n  const basisCash = useBasisCash();\n\n  const fetchCashPrice = useCallback(async () => {\n    setPrice(await basisCash.getBondOraclePriceInLastTWAP());\n  }, [basisCash]);\n\n  useEffect(() => {\n    if (basisCash) {\n      fetchCashPrice().catch((err) => console.error(`Failed to fetch GAB price: ${err.stack}`));\n      const refreshInterval = setInterval(fetchCashPrice, config.refreshInterval);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [setPrice, basisCash]);\n\n  return price;\n};\n\nexport default useBondOraclePriceInLastTWAP;\n"]},"metadata":{},"sourceType":"module"}